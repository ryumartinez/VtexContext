//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Infrastructure
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class openapi_specClient 
    {
        private string _baseUrl = "https://{accountName}.{environment}.com.br";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public openapi_specClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Get order</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <param name="orderId">Order ID.</param>
        /// <param name="reason">Reason for requesting unmasked data.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> GetOrder2Async(string content_Type, string accept, string orderId, string reason)
        {
            return GetOrder2Async(content_Type, accept, orderId, reason, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get order</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <param name="orderId">Order ID.</param>
        /// <param name="reason">Reason for requesting unmasked data.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response> GetOrder2Async(string content_Type, string accept, string orderId, string reason, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/orders/pvt/document/{orderId}?");
            urlBuilder_.Replace("{orderId}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            if (reason != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("reason") + "=").Append(System.Uri.EscapeDataString(ConvertToString(reason, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (content_Type == null)
                        throw new System.ArgumentNullException("content_Type");
                    request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));
                    if (accept == null)
                        throw new System.ArgumentNullException("accept");
                    request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>List orders</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response2> ListOrders2Async(string content_Type, string accept, Body body)
        {
            return ListOrders2Async(content_Type, accept, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>List orders</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response2> ListOrders2Async(string content_Type, string accept, Body body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/orders/extendsearch/orders");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (content_Type == null)
                        throw new System.ArgumentNullException("content_Type");
                    request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));
                    if (accept == null)
                        throw new System.ArgumentNullException("accept");
                    request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Start handling order</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <param name="orderId">Order ID.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StartHandling2Async(string content_Type, string accept, string orderId)
        {
            return StartHandling2Async(content_Type, accept, orderId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start handling order</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <param name="orderId">Order ID.</param>
        /// <returns>No Content</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task StartHandling2Async(string content_Type, string accept, string orderId, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/orders/pvt/document/{orderId}/actions/start-handling");
            urlBuilder_.Replace("{orderId}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (content_Type == null)
                        throw new System.ArgumentNullException("content_Type");
                    request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));
                    if (accept == null)
                        throw new System.ArgumentNullException("accept");
                    request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Too Many Requests", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Cancel order</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <param name="orderId">Order ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response3> CancelOrder2Async(string content_Type, string accept, string orderId, Body2 body)
        {
            return CancelOrder2Async(content_Type, accept, orderId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Cancel order</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <param name="orderId">Order ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response3> CancelOrder2Async(string content_Type, string accept, string orderId, Body2 body, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/orders/pvt/document/{orderId}/cancel");
            urlBuilder_.Replace("{orderId}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (content_Type == null)
                        throw new System.ArgumentNullException("content_Type");
                    request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));
                    if (accept == null)
                        throw new System.ArgumentNullException("accept");
                    request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The credentials are not enabled to access the service.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Value not found.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Too many requests.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Order invoice notification</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <param name="orderId">Order ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response4> InvoiceNotification2Async(string content_Type, string accept, string orderId, Body3 body)
        {
            return InvoiceNotification2Async(content_Type, accept, orderId, body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Order invoice notification</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <param name="orderId">Order ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response4> InvoiceNotification2Async(string content_Type, string accept, string orderId, Body3 body, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/orders/pvt/document/{orderId}/invoices");
            urlBuilder_.Replace("{orderId}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (content_Type == null)
                        throw new System.ArgumentNullException("content_Type");
                    request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));
                    if (accept == null)
                        throw new System.ArgumentNullException("accept");
                    request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Too Many Requests", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Send payment notification</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <param name="orderId">Order ID.</param>
        /// <param name="paymentId">Payment ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SendPaymentNotification2Async(string content_Type, string accept, string orderId, string paymentId)
        {
            return SendPaymentNotification2Async(content_Type, accept, orderId, paymentId, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Send payment notification</summary>
        /// <param name="content_Type">Type of the content being sent.</param>
        /// <param name="accept">HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.</param>
        /// <param name="orderId">Order ID.</param>
        /// <param name="paymentId">Payment ID.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SendPaymentNotification2Async(string content_Type, string accept, string orderId, string paymentId, System.Threading.CancellationToken cancellationToken)
        {
            if (orderId == null)
                throw new System.ArgumentNullException("orderId");
    
            if (paymentId == null)
                throw new System.ArgumentNullException("paymentId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/orders/pvt/document/{orderId}/payment/{paymentId}/notify-payment");
            urlBuilder_.Replace("{orderId}", System.Uri.EscapeDataString(ConvertToString(orderId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{paymentId}", System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (content_Type == null)
                        throw new System.ArgumentNullException("content_Type");
                    request_.Headers.TryAddWithoutValidation("Content-Type", ConvertToString(content_Type, System.Globalization.CultureInfo.InvariantCulture));
                    if (accept == null)
                        throw new System.ArgumentNullException("accept");
                    request_.Headers.TryAddWithoutValidation("Accept", ConvertToString(accept, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad Request", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Forbidden", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Not Found", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "429") 
                        {
                            string responseText_ = ( response_.Content == null ) ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Too Many Requests", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    /// <summary>Information about the client who created the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ClientProfileData 
    {
        /// <summary>Client ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Id { get; set; }
    
        /// <summary>User profile ID.</summary>
        [Newtonsoft.Json.JsonProperty("userProfileId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserProfileId { get; set; }
    
        /// <summary>User profile version.</summary>
        [Newtonsoft.Json.JsonProperty("userProfileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserProfileVersion { get; set; }
    
        /// <summary>Client first name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; }
    
        /// <summary>Client last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; }
    
        /// <summary>Client email address.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }
    
        /// <summary>Client document code.</summary>
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Document { get; set; }
    
        /// <summary>If the client is a legal entity, this field includes the corporate document.</summary>
        [Newtonsoft.Json.JsonProperty("corporateDocument", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CorporateDocument { get; set; }
    
        /// <summary>If the client is a legal entity, this field includes the corporate name.</summary>
        [Newtonsoft.Json.JsonProperty("corporateName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CorporateName { get; set; }
    
        /// <summary>Client document type.</summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DocumentType { get; set; }
    
        /// <summary>Client telephone number.</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; }
    
        /// <summary>If the client is a legal entity, this field includes the trade name.</summary>
        [Newtonsoft.Json.JsonProperty("tradeName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string TradeName { get; set; }
    
        /// <summary>If the client is a legal entity, this field includes the corporate state inscription.</summary>
        [Newtonsoft.Json.JsonProperty("stateInscription", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StateInscription { get; set; }
    
        /// <summary>If the client is a legal entity, this field includes the corporate telephone number.</summary>
        [Newtonsoft.Json.JsonProperty("corporatePhone", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CorporatePhone { get; set; }
    
        /// <summary>Defines if the client is corporate and a legal entity (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isCorporate", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCorporate { get; set; }
    
        /// <summary>Customer class identification.</summary>
        [Newtonsoft.Json.JsonProperty("customerClass", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CustomerClass { get; set; }
    
        /// <summary>Customer code.</summary>
        [Newtonsoft.Json.JsonProperty("customerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Order shipping information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShippingData 
    {
        /// <summary>Shipping address details.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address2 Address { get; set; } = new Address2();
    
        /// <summary>Logistics information regarding order items.</summary>
        [Newtonsoft.Json.JsonProperty("logisticsInfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LogisticsInfo> LogisticsInfo { get; set; } = new System.Collections.ObjectModel.Collection<LogisticsInfo>();
    
        /// <summary>Order shipping label information.</summary>
        [Newtonsoft.Json.JsonProperty("trackingHints", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TrackingHints> TrackingHints { get; set; }
    
        /// <summary>Selected adresses information.</summary>
        [Newtonsoft.Json.JsonProperty("selectedAddresses", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SelectedAddresses> SelectedAddresses { get; set; } = new System.Collections.ObjectModel.Collection<SelectedAddresses>();
    
        /// <summary>Available adresses information.</summary>
        [Newtonsoft.Json.JsonProperty("availableAddresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableAddresses> AvailableAddresses { get; set; }
    
        /// <summary>Order contact information.</summary>
        [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContactInformation> ContactInformation { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipping address details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address 
    {
        /// <summary>Shipping address type.</summary>
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddressType AddressType { get; set; }
    
        /// <summary>Full name of the order receiver.</summary>
        [Newtonsoft.Json.JsonProperty("receiverName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReceiverName { get; set; }
    
        /// <summary>Shipping address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressId { get; set; }
    
        /// <summary>Shipping address version ID.</summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }
    
        /// <summary>Shipping address entity ID.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        /// <summary>Shipping address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; }
    
        /// <summary>Shipping address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }
    
        /// <summary>Shipping address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; }
    
        /// <summary>Shipping address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }
    
        /// <summary>Shipping address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; }
    
        /// <summary>Shipping address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Number { get; set; }
    
        /// <summary>Shipping address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Neighborhood { get; set; }
    
        /// <summary>Shipping address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Complement { get; set; }
    
        /// <summary>Shipping address additional information.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Reference { get; set; }
    
        /// <summary>Shipping address pair of geolocation coordinates, first longitude then latitude.</summary>
        [Newtonsoft.Json.JsonProperty("geoCoordinates", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<double> GeoCoordinates { get; set; } = new System.Collections.ObjectModel.Collection<double>();
    
        /// <summary>Contact unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a [loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) that was transformed into a [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PickupStoreInfo 
    {
        /// <summary>Defines if the shipping type was pickup (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isPickupStore", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPickupStore { get; set; }
    
        /// <summary>Name of the pickup point displayed at checkout.</summary>
        [Newtonsoft.Json.JsonProperty("friendlyName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FriendlyName { get; set; }
    
        /// <summary>Pickup point address information.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.AllowNull)]
        public Address3 Address { get; set; }
    
        /// <summary>Additional information.</summary>
        [Newtonsoft.Json.JsonProperty("additionalInfo", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AdditionalInfo { get; set; }
    
        /// <summary>ID of the loading dock related to the pickup point.</summary>
        [Newtonsoft.Json.JsonProperty("dockId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DockId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about changes in the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChangesAttachment 
    {
        /// <summary>Order changes ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Order changes details.</summary>
        [Newtonsoft.Json.JsonProperty("changesData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ChangesData> ChangesData { get; set; } = new System.Collections.ObjectModel.Collection<ChangesData>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about stats.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Stats 
    {
        /// <summary>Stats object.</summary>
        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Stats1 Stats1 { get; set; } = new Stats1();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Body 
    {
        /// <summary>Filters orders by [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196). The possible values are:
        /// - `waiting-for-sellers-confirmation`
        /// - `payment-pending`
        /// - `payment-approved`
        /// - `ready-for-handling`
        /// - `handling`
        /// - `invoiced`
        /// - `canceled`</summary>
        [Newtonsoft.Json.JsonProperty("f_status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string F_status { get; set; }
    
        /// <summary>Filters orders by creation date by concatenating the `creationDate` prefix with the desired date range in [ISO 8601 format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `creationDate:[YYYY-MM-DDThh:mm:ssZ TO YYYY-MM-DDThh:mm:ssZ]`. For example:
        /// - 1 day: `creationDate:[2024-01-01T00:00:00.000Z TO 2024-01-02T00:00:00.000Z]`
        /// - 1 month: `creationDate:[2024-01-01T00:00:00.000Z TO 2024-02-01T00:00:00.000Z]`
        /// - 1 year: `creationDate:[2023-01-01T00:00:00.000Z TO 2024-01-01T00:00:00.000Z]`</summary>
        [Newtonsoft.Json.JsonProperty("f_creationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string F_creationDate { get; set; }
    
        /// <summary>Filters orders by showing only [incomplete orders](https://help.vtex.com/en/tutorial/understanding-incomplete-orders) (`true`), or only complete orders (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("incompleteOrders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncompleteOrders { get; set; }
    
        /// <summary>Filters orders by error in the workflow processing. You can choose to filter by temporary error (`temp`), permanet error (`perm`) or include all errors (`all`).</summary>
        [Newtonsoft.Json.JsonProperty("filterError", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BodyFilterError FilterError { get; set; }
    
        /// <summary>Number of orders per page, up to the limit of 100 results.</summary>
        [Newtonsoft.Json.JsonProperty("per_page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Per_page { get; set; }
    
        /// <summary>Number of the page to be retrieved.</summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page { get; set; }
    
        /// <summary>Filters and sorts orders by combining an **OrderField** with a **SortType** value. To do so, you have to concatenate them, as in `OrderField,SortType`. The values accepted are the following:
        /// - **OrderField:** `creationDate`, `orderId`, `totalValue` and `origin`.
        /// - **SortType:** `asc` and `desc`.
        /// 
        /// See below some examples of the `orderBy` field with different `OrderField` values for the `SortType` value `asc`:
        /// - **orderBy creation date:** `creationDate,asc`
        /// - **orderBy order ID:** `orderId,asc`
        /// - **orderBy total value:** `totalValue,asc`
        /// - **orderBy origin:** `origin,asc`</summary>
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderBy { get; set; }
    
        /// <summary>Full-text search for the orders considering the following fields:
        /// - `orderId`
        /// - `clientEmail`
        /// - `clientDocument`
        /// - `clientName`</summary>
        [Newtonsoft.Json.JsonProperty("q", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Q { get; set; }
    
        /// <summary>Filters orders by SKU ID. To use multiple SKU IDs, separate them using a comma.</summary>
        [Newtonsoft.Json.JsonProperty("sku_Ids", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sku_Ids { get; set; }
    
        /// <summary>Filters orders by gift list ID.</summary>
        [Newtonsoft.Json.JsonProperty("listId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ListId { get; set; }
    
        /// <summary>Filters orders by authorized date by concatenating the sufix `authorizedDate` with the desired date range in [ISO 8601 format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `authorizedDate:[YYYY-MM-DDThh:mm:ssZ TO YYYY-MM-DDThh:mm:ssZ]`.</summary>
        [Newtonsoft.Json.JsonProperty("f_authorizedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string F_authorizedDate { get; set; }
    
        /// <summary>Filters orders by payment name.</summary>
        [Newtonsoft.Json.JsonProperty("f_paymentNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string F_paymentNames { get; set; }
    
        /// <summary>Filters orders by payment ID.</summary>
        [Newtonsoft.Json.JsonProperty("paymentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentId { get; set; }
    
        /// <summary>Filters orders by the PCI provider transaction ID.</summary>
        [Newtonsoft.Json.JsonProperty("pci_tid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pci_tid { get; set; }
    
        /// <summary>Filters orders by the provider unique sequential number for the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("nsu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nsu { get; set; }
    
        /// <summary>Filters orders with the `invoicesInput` field value different from `null` when set to `true`.</summary>
        [Newtonsoft.Json.JsonProperty("f_hasInputInvoice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool F_hasInputInvoice { get; set; }
    
        /// <summary>Filters only orders with the `invoicesOutput` field value different from `null`  when set to `true`.</summary>
        [Newtonsoft.Json.JsonProperty("f_hasOutputInvoice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool F_hasOutputInvoice { get; set; }
    
        /// <summary>Filters orders by invoice date by concatenating the `invoicedDate` prefix with the desired date range in [ISO 8601 format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `invoicedDate:[YYYY-MM-DDThh:mm:ssZ TO YYYY-MM-DDThh:mm:ssZ]`.</summary>
        [Newtonsoft.Json.JsonProperty("f_invoicedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string F_invoicedDate { get; set; }
    
        /// <summary>Filters orders by shipping estimate time in days by concatenating the desired number of days with the `.days` suffix. For example:
        /// - Next 7 days: `7.days`
        /// - Tomorrow: `1.days`
        /// - Today: `0.days`
        /// - Late: `-1.days`</summary>
        [Newtonsoft.Json.JsonProperty("f_shippingEstimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string F_shippingEstimate { get; set; }
    
        /// <summary>Filters orders by seller name.</summary>
        [Newtonsoft.Json.JsonProperty("f_sellerNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string F_sellerNames { get; set; }
    
        /// <summary>Filters orders by [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) ID.</summary>
        [Newtonsoft.Json.JsonProperty("f_affiliateId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string F_affiliateId { get; set; }
    
        /// <summary>Filters orders by call center operator name.</summary>
        [Newtonsoft.Json.JsonProperty("f_callCenterOperatorName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string F_callCenterOperatorName { get; set; }
    
        /// <summary>Filters orders made via [VTEX Sales App](https://help.vtex.com/en/tracks/instore-getting-started-and-setting-up--zav76TFEZlAjnyBVL5tRc/7fnnVlG3Kv1Tay9iagc5yf) (`true`) or not made via VTEX Sales App (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("f_isInstore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool F_isInstore { get; set; }
    
        /// <summary>Filters orders by promotion or tax name.</summary>
        [Newtonsoft.Json.JsonProperty("f_RnB", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string F_RnB { get; set; }
    
        /// <summary>Filters orders by sales channel ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID.</summary>
        [Newtonsoft.Json.JsonProperty("salesChannelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesChannelId { get; set; }
    
        /// <summary>Filters orders by sales channel ([or trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) name.</summary>
        [Newtonsoft.Json.JsonProperty("f_salesChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string F_salesChannel { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Body2 
    {
        /// <summary>Reason for canceling the order.</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Body3 
    {
        /// <summary>Invoice type, which can be:
        /// - `Output`: Selling invoice type, used for the customer to receive the product.
        /// - `Input`: Returning invoice type, used for the customer to return a product to the store.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>Invoice issuance date in the format `YYYY-MM-DD`.</summary>
        [Newtonsoft.Json.JsonProperty("issuedDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssuedDate { get; set; }
    
        /// <summary>Unique number that identifies the invoice.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string InvoiceNumber { get; set; }
    
        /// <summary>Total price being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceValue", Required = Newtonsoft.Json.Required.Always)]
        public int InvoiceValue { get; set; }
    
        /// <summary>Extra value in the invoice in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.</summary>
        [Newtonsoft.Json.JsonProperty("extraValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ExtraValue { get; set; }
    
        /// <summary>Invoice key.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceKey { get; set; }
    
        /// <summary>Invoice URL. It can be used to send the URL of an XML file, for example, which is useful for some integrations.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceUrl { get; set; }
    
        /// <summary>The name of the carrier responsible for delivering the order.
        /// &gt; This field should only be used when sending **tracking** information. When the request is used for sending the invoice, this field should be left empty (`""`).</summary>
        [Newtonsoft.Json.JsonProperty("courier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Courier { get; set; }
    
        /// <summary>Code that identifies the order tracking.
        /// &gt; This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`""`).</summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }
    
        /// <summary>URL used to track the order.
        /// &gt; This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`""`).</summary>
        [Newtonsoft.Json.JsonProperty("trackingUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingUrl { get; set; }
    
        /// <summary>Array containing the SKUs that are being invoiced.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Items> Items { get; set; } = new System.Collections.ObjectModel.Collection<Items>();
    
        /// <summary>[CFOP](https://www.gov.br/receitafederal/pt-br/acesso-a-informacao/acoes-e-programas/facilitacao/anexo-ecf-cfop) (_Código Fiscal de Operação e Prestação_) is a Brazilian fiscal code of operations and services that classifies business transactions types.</summary>
        [Newtonsoft.Json.JsonProperty("cfop", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cfop { get; set; }
    
        /// <summary>Number of volumes in the invoice.</summary>
        [Newtonsoft.Json.JsonProperty("volumes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Volumes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response 
    {
        /// <summary>Order ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Seller order ID.</summary>
        [Newtonsoft.Json.JsonProperty("sellerOrderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerOrderId { get; set; }
    
        /// <summary>ID of the shopping cart from which the order was created.</summary>
        [Newtonsoft.Json.JsonProperty("orderFormId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderFormId { get; set; }
    
        /// <summary>Order's [origin in the order flow](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).</summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResponseOrigin Origin { get; set; }
    
        /// <summary>Order group ID.</summary>
        [Newtonsoft.Json.JsonProperty("orderGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderGroup { get; set; }
    
        /// <summary>Information on order items.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Items2> Items { get; set; }
    
        /// <summary>Marketplace items.</summary>
        [Newtonsoft.Json.JsonProperty("marketplaceItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MarketplaceItems { get; set; }
    
        /// <summary>Order authorization date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("authorizedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorizedDate { get; set; }
    
        /// <summary>Information about [subscriptions](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453), when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("subscriptionData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubscriptionData SubscriptionData { get; set; }
    
        /// <summary>Order taxes information.</summary>
        [Newtonsoft.Json.JsonProperty("taxData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxData TaxData { get; set; }
    
        /// <summary>Order invoice date and time in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("invoicedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoicedDate { get; set; }
    
        /// <summary>Order ID in the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("marketplaceOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceOrderId { get; set; }
    
        /// <summary>Marketplace endpoint for post purchase communication.</summary>
        [Newtonsoft.Json.JsonProperty("marketplaceServicesEndpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceServicesEndpoint { get; set; }
    
        /// <summary>Information about the client who created the order.</summary>
        [Newtonsoft.Json.JsonProperty("clientProfileData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClientProfileData2 ClientProfileData { get; set; }
    
        /// <summary>[Gift list](https://developers.vtex.com/docs/guides/creating-gift-lists) information.</summary>
        [Newtonsoft.Json.JsonProperty("giftRegistryData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GiftRegistryData GiftRegistryData { get; set; }
    
        /// <summary>Customer email [tracked](https://help.vtex.com/en/tutorial/understanding-the-conversation-tracker--tutorials_195).</summary>
        [Newtonsoft.Json.JsonProperty("emailTracked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailTracked { get; set; }
    
        /// <summary>Defines if the order was placed via [VTEX Sales App](https://help.vtex.com/en/tracks/instore-getting-started-and-setting-up--zav76TFEZlAjnyBVL5tRc) (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isCheckedIn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCheckedIn { get; set; }
    
        /// <summary>User who approved the order, in case of manual approval.</summary>
        [Newtonsoft.Json.JsonProperty("approvedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApprovedBy { get; set; }
    
        /// <summary>User that canceled the order.</summary>
        [Newtonsoft.Json.JsonProperty("cancelledBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancelledBy { get; set; }
    
        /// <summary>User that canceled the order.</summary>
        [Newtonsoft.Json.JsonProperty("canceledBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CanceledBy { get; set; }
    
        /// <summary>Order cancellation reason.</summary>
        [Newtonsoft.Json.JsonProperty("cancelReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancelReason { get; set; }
    
        /// <summary>Information about the call center operator responsible for the order.</summary>
        [Newtonsoft.Json.JsonProperty("callCenterOperatorData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CallCenterOperatorData CallCenterOperatorData { get; set; }
    
        /// <summary>Defines if order cancellation is allowed (`true`) or not anymore (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("allowCancellation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllowCancellation { get; set; }
    
        /// <summary>Defines if the order can be edited (`true`) or not anymore (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("allowEdition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllowEdition { get; set; }
    
        /// <summary>Rounding error total amount in cents, when applicable. For example, in orders with a discount over non-integer multiplier items, the rounding price is performed per item, not after the sum of all items. That can cause a difference in the total discount amount, which is informed in this field.</summary>
        [Newtonsoft.Json.JsonProperty("roundingError", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RoundingError { get; set; }
    
        /// <summary>Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) related to the order.</summary>
        [Newtonsoft.Json.JsonProperty("salesChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SalesChannel { get; set; }
    
        /// <summary>Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) information.</summary>
        [Newtonsoft.Json.JsonProperty("salesChannelData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SalesChannelData SalesChannelData { get; set; }
    
        /// <summary>Customizable fields created by the store for the shopping cart. This field is useful for storing data not included in other fields. For example, a message for a gift or a name to be printed in a shirt.</summary>
        [Newtonsoft.Json.JsonProperty("customData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomData CustomData { get; set; }
    
        /// <summary>Information about changes in the order.</summary>
        [Newtonsoft.Json.JsonProperty("changesAttachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ChangesAttachment2 ChangesAttachment { get; set; }
    
        /// <summary>Commercial condition information.</summary>
        [Newtonsoft.Json.JsonProperty("commercialConditionData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommercialConditionData { get; set; }
    
        /// <summary>Order shipping information.</summary>
        [Newtonsoft.Json.JsonProperty("shippingData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShippingData2 ShippingData { get; set; }
    
        /// <summary>Information about shipping packages, which are created after order invoicing.</summary>
        [Newtonsoft.Json.JsonProperty("packageAttachment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PackageAttachment PackageAttachment { get; set; }
    
        /// <summary>Information about the marketplace related to the order.</summary>
        [Newtonsoft.Json.JsonProperty("marketplace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Marketplace Marketplace { get; set; }
    
        /// <summary>Information about the order context.</summary>
        [Newtonsoft.Json.JsonProperty("contextData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContextData ContextData { get; set; }
    
        /// <summary>Last transactional message sent to the customer.</summary>
        [Newtonsoft.Json.JsonProperty("lastMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastMessage { get; set; }
    
        /// <summary>[Order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196) in the workflow.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Order handling information.</summary>
        [Newtonsoft.Json.JsonProperty("handlingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HandlingData { get; set; }
    
        /// <summary>Document version identification.</summary>
        [Newtonsoft.Json.JsonProperty("documentVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentVersion { get; set; }
    
        /// <summary>APP version identification.</summary>
        [Newtonsoft.Json.JsonProperty("appVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AppVersion { get; set; }
    
        /// <summary>Information about order processing and workflow.</summary>
        [Newtonsoft.Json.JsonProperty("workflowData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowData WorkflowData { get; set; }
    
        /// <summary>When the order is created at a physical store which is configured as a pickup point, this field retrieves the pickup point ID.</summary>
        [Newtonsoft.Json.JsonProperty("checkedInPickupPointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CheckedInPickupPointId { get; set; }
    
        /// <summary>Order finger print code.</summary>
        [Newtonsoft.Json.JsonProperty("fingerPrint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FingerPrint { get; set; }
    
        /// <summary>Defines if the VTEX account uses [PII data architecture](https://developers.vtex.com/docs/guides/pii-data-architecture-specifications) (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("piiHidden", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PiiHidden { get; set; }
    
        /// <summary>Indicates if the order workflow presents an error (`true`) or if there are no errors (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("workflowIsInError", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WorkflowIsInError { get; set; }
    
        /// <summary>Identification code of the call center operator responsible for the order, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("callCenterOperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallCenterOperator { get; set; }
    
        /// <summary>[Order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196) in the workflow.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Order creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneCreationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZoneCreationDate { get; set; }
    
        /// <summary>Date of the order processing last change in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("timeZoneLastChange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZoneLastChange { get; set; }
    
        /// <summary>User type.</summary>
        [Newtonsoft.Json.JsonProperty("userType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserType { get; set; }
    
        /// <summary>Information about the customer preferences.</summary>
        [Newtonsoft.Json.JsonProperty("clientPreferencesData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ClientPreferencesData ClientPreferencesData { get; set; }
    
        /// <summary>Order ID.</summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }
    
        /// <summary>Workflow instance ID.</summary>
        [Newtonsoft.Json.JsonProperty("workflowInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowInstanceId { get; set; }
    
        /// <summary>Order creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreationDate { get; set; }
    
        /// <summary>Information about the order totals.</summary>
        [Newtonsoft.Json.JsonProperty("totals", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Totals> Totals { get; set; }
    
        /// <summary>Sequence number part of the order ID. For example, in order `v70530116str-01`, the sequence is `70530116`.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sequence { get; set; }
    
        /// <summary>Receipts with information about transactions.</summary>
        [Newtonsoft.Json.JsonProperty("receiptData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReceiptData ReceiptData { get; set; }
    
        /// <summary>Defines if the order payment has been settled (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isCompleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCompleted { get; set; }
    
        /// <summary>Optional field for additional information.</summary>
        [Newtonsoft.Json.JsonProperty("openTextField", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> OpenTextField { get; set; }
    
        /// <summary>Three-letter [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) code configured by the seller to identify a marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("affiliateId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffiliateId { get; set; }
    
        /// <summary>Order total value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Value { get; set; }
    
        /// <summary>Main [account name](https://help.vtex.com/en/tutorial/what-is-an-account-name--i0mIGLcg3QyEy8OCicEoC).</summary>
        [Newtonsoft.Json.JsonProperty("hostname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hostname { get; set; }
    
        /// <summary>Email of the store employee responsible for managing the order.</summary>
        [Newtonsoft.Json.JsonProperty("followUpEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FollowUpEmail { get; set; }
    
        /// <summary>Order last change date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("lastChange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastChange { get; set; }
    
        /// <summary>Information about the sellers associated with the order.</summary>
        [Newtonsoft.Json.JsonProperty("sellers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sellers> Sellers { get; set; }
    
        /// <summary>Information about marketing and promotions, such as coupon code and [Urchin Tracking Module (UTM)](https://help.vtex.com/en/tutorial/what-are-utm-source-utm-campaign-and-utm-medium--2wTz7QJ8KUG6skGAoAQuii).</summary>
        [Newtonsoft.Json.JsonProperty("marketingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MarketingData MarketingData { get; set; }
    
        /// <summary>Information about promotions and taxes valid for the order.</summary>
        [Newtonsoft.Json.JsonProperty("ratesAndBenefitsData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RatesAndBenefitsData RatesAndBenefitsData { get; set; }
    
        /// <summary>Payments information.</summary>
        [Newtonsoft.Json.JsonProperty("paymentData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PaymentData PaymentData { get; set; }
    
        /// <summary>Order invoices information.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvoiceData InvoiceData { get; set; }
    
        /// <summary>Store preferences in the [Account settings](https://help.vtex.com/en/tutorial/account-details-page--2vhUVOKfCaswqLguT2F9xq).</summary>
        [Newtonsoft.Json.JsonProperty("storePreferencesData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorePreferencesData StorePreferencesData { get; set; }
    
        /// <summary>Merchant name.</summary>
        [Newtonsoft.Json.JsonProperty("merchantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantName { get; set; }
    
        /// <summary>Metadata information about items.</summary>
        [Newtonsoft.Json.JsonProperty("itemMetadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemMetadata ItemMetadata { get; set; }
    
        /// <summary>Order creation environment, which can be a [development workspace](https://developers.vtex.com/docs/guides/vtex-io-documentation-creating-a-development-workspace) (`BETA`) or a [production workspace](https://developers.vtex.com/docs/guides/vtex-io-documentation-creating-a-production-workspace) (`STABLE`).</summary>
        [Newtonsoft.Json.JsonProperty("creationEnvironment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResponseCreationEnvironment? CreationEnvironment { get; set; }
    
        /// <summary>Information about [order cancellation](https://developers.vtex.com/docs/guides/order-canceling-improvements), when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("cancellationData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationData CancellationData { get; set; }
    
        /// <summary>Information about the [seller order cancellation denials](https://developers.vtex.com/docs/guides/order-canceling-improvements), regardless if the cancellation request was made by the marketplace or the customer.</summary>
        [Newtonsoft.Json.JsonProperty("cancellationRequests", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CancellationRequests> CancellationRequests { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response2 
    {
        /// <summary>List with orders' information.</summary>
        [Newtonsoft.Json.JsonProperty("list", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<List> List { get; set; }
    
        /// <summary>Array of facets.</summary>
        [Newtonsoft.Json.JsonProperty("facets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Facets { get; set; }
    
        /// <summary>Pagination information.</summary>
        [Newtonsoft.Json.JsonProperty("paging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Paging Paging { get; set; }
    
        /// <summary>Information about stats.</summary>
        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Stats2 Stats { get; set; }
    
        /// <summary>Records limit.</summary>
        [Newtonsoft.Json.JsonProperty("reportRecordsLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReportRecordsLimit { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response3 
    {
        /// <summary>Cancellation request date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }
    
        /// <summary>Order ID in the seller environment.</summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }
    
        /// <summary>Protocol code generated by the cancellation request.</summary>
        [Newtonsoft.Json.JsonProperty("receipt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response4 
    {
        /// <summary>Date and time when the order invoice notification was received in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }
    
        /// <summary>Order ID in the seller environment.</summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }
    
        /// <summary>Protocol code generated by the request.</summary>
        [Newtonsoft.Json.JsonProperty("receipt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Receipt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address2 
    {
        /// <summary>Shipping address type.</summary>
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Address2AddressType AddressType { get; set; }
    
        /// <summary>Full name of the order receiver.</summary>
        [Newtonsoft.Json.JsonProperty("receiverName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReceiverName { get; set; }
    
        /// <summary>Shipping address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressId { get; set; }
    
        /// <summary>Shipping address version ID.</summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }
    
        /// <summary>Shipping address entity ID.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        /// <summary>Shipping address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; }
    
        /// <summary>Shipping address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }
    
        /// <summary>Shipping address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; }
    
        /// <summary>Shipping address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }
    
        /// <summary>Shipping address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; }
    
        /// <summary>Shipping address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Number { get; set; }
    
        /// <summary>Shipping address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Neighborhood { get; set; }
    
        /// <summary>Shipping address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Complement { get; set; }
    
        /// <summary>Shipping address additional information.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Reference { get; set; }
    
        /// <summary>Shipping address pair of geolocation coordinates, first longitude then latitude.</summary>
        [Newtonsoft.Json.JsonProperty("geoCoordinates", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<double> GeoCoordinates { get; set; } = new System.Collections.ObjectModel.Collection<double>();
    
        /// <summary>Contact unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Logistics information about an item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogisticsInfo 
    {
        /// <summary>Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).</summary>
        [Newtonsoft.Json.JsonProperty("polygonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolygonName { get; set; }
    
        /// <summary>Shipping estimate time in days. For instance, three business days is represented `3bd`.</summary>
        [Newtonsoft.Json.JsonProperty("shippingEstimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingEstimate { get; set; }
    
        /// <summary>Shipping address entity ID.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        /// <summary>Shipping address version ID.</summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }
    
        /// <summary>Information about a [loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) that was transformed into a [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).</summary>
        [Newtonsoft.Json.JsonProperty("pickupStoreInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PickupStoreInfo2 PickupStoreInfo { get; set; }
    
        /// <summary>[Scheduled delivery](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) window information, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryWindow { get; set; }
    
        /// <summary>Item selling price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("sellingPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SellingPrice { get; set; }
    
        /// <summary>Item [list price](https://help.vtex.com/en/tracks/prices-101--6f8pwCns3PJHqMvQSugNfP/3XcXp0r5WrJvogB8KIX4Kx#list-price) in cents.</summary>
        [Newtonsoft.Json.JsonProperty("listPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ListPrice { get; set; }
    
        /// <summary>Item shipping price in cents. This value does not correspond to the order total shipping price.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Price { get; set; }
    
        /// <summary>Defines if the delivery channel is delivery or pickup.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LogisticsInfoDeliveryChannel DeliveryChannel { get; set; }
    
        /// <summary>[Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) company name.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryCompany { get; set; }
    
        /// <summary>Order delivery IDs information.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeliveryIds> DeliveryIds { get; set; }
    
        /// <summary>Shipping estimate date, defined after order confirmation, in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("shippingEstimateDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingEstimateDate { get; set; }
    
        /// <summary>Delivery channels associated with the sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)).</summary>
        [Newtonsoft.Json.JsonProperty("deliveryChannels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeliveryChannels> DeliveryChannels { get; set; }
    
        /// <summary>SKU ID.</summary>
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemId { get; set; }
    
        /// <summary>List of shipping address countries.</summary>
        [Newtonsoft.Json.JsonProperty("shipsTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ShipsTo { get; set; }
    
        /// <summary>Service Level Agreements (SLA) corresponding to [shipping policies](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).</summary>
        [Newtonsoft.Json.JsonProperty("slas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Slas> Slas { get; set; }
    
        /// <summary>Shipping address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressId { get; set; }
    
        /// <summary>Delivery channel selected by the customer. This field is being deprecated and the information it retrieves can be found in the `deliveryChannel` field.</summary>
        [Newtonsoft.Json.JsonProperty("selectedDeliveryChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LogisticsInfoSelectedDeliveryChannel SelectedDeliveryChannel { get; set; }
    
        /// <summary>Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time.</summary>
        [Newtonsoft.Json.JsonProperty("lockTTL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LockTTL { get; set; }
    
        /// <summary>Service Level Agreement (SLA), which corresponds to the shipping method selected by the customer, usually like normal or express.</summary>
        [Newtonsoft.Json.JsonProperty("selectedSla", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SelectedSla { get; set; }
    
        /// <summary>Each item in the order is identified by an index. The position starts in `0`, followed by `1`, `2`, and so on.</summary>
        [Newtonsoft.Json.JsonProperty("itemIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemIndex { get; set; }
    
        /// <summary>[Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("pickupPointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PickupPointId { get; set; }
    
        /// <summary>Number of days the carrier takes in transit to deliver the order. For instance, three business days is represented `3bd`.</summary>
        [Newtonsoft.Json.JsonProperty("transitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipping label details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TrackingHints 
    {
        /// <summary>Order tracking ID.</summary>
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingId { get; set; }
    
        /// <summary>[Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) name.</summary>
        [Newtonsoft.Json.JsonProperty("courierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourierName { get; set; }
    
        /// <summary>Order tracking URL.</summary>
        [Newtonsoft.Json.JsonProperty("trackingUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingUrl { get; set; }
    
        /// <summary>Order tracking label.</summary>
        [Newtonsoft.Json.JsonProperty("trackingLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingLabel { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Details about a selected adress.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SelectedAddresses 
    {
        /// <summary>Selected adress shipping type.</summary>
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SelectedAddressesAddressType AddressType { get; set; }
    
        /// <summary>Full name of the order receiver.</summary>
        [Newtonsoft.Json.JsonProperty("receiverName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverName { get; set; }
    
        /// <summary>Selected address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressId { get; set; }
    
        /// <summary>Selected address version ID.</summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }
    
        /// <summary>Selected address entity ID.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        /// <summary>Selected address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>Selected address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Selected address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Selected address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>Selected address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Selected address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Selected address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        /// <summary>Selected address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement { get; set; }
    
        /// <summary>Selected address additional information.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Selected address pair of geolocation coordinates, first longitude then latitude.</summary>
        [Newtonsoft.Json.JsonProperty("geoCoordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> GeoCoordinates { get; set; }
    
        /// <summary>Contact unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Details about an available adress.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AvailableAddresses 
    {
        /// <summary>Available adress shipping type.</summary>
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AvailableAddressesAddressType AddressType { get; set; }
    
        /// <summary>Full name of the order receiver.</summary>
        [Newtonsoft.Json.JsonProperty("receiverName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverName { get; set; }
    
        /// <summary>Available address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressId { get; set; }
    
        /// <summary>Available address version ID.</summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }
    
        /// <summary>Available address entity ID.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        /// <summary>Available address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>Available address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Available address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Available address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>Available address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Available address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Available address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        /// <summary>Available address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement { get; set; }
    
        /// <summary>Available address additional information.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Available address pair of geolocation coordinates, first longitude then latitude.</summary>
        [Newtonsoft.Json.JsonProperty("geoCoordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> GeoCoordinates { get; set; }
    
        /// <summary>Contact unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Order contact details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContactInformation 
    {
        /// <summary>Contact ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Contact email.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>Contact first name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        /// <summary>Contact last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        /// <summary>Contact document number.</summary>
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document { get; set; }
    
        /// <summary>Contact phone number.</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        /// <summary>Contact document type.</summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AddressType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"residential")]
        Residential = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
        Pickup = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address3 
    {
        /// <summary>Pickup point address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>Three-digit country code of the pickup point address in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>Pickup point address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Pickup point address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Pickup point address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        /// <summary>Pickup point address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Pickup point address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Pickup point address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement { get; set; }
    
        /// <summary>Pickup point address reference.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Pickup point geolocation coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Details about an order change.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChangesData 
    {
        /// <summary>Text explaining why the order was changed. This information may be shown to the customer in the storefront or transactional emails.</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reason { get; set; }
    
        /// <summary>Order change discount value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("discountValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DiscountValue { get; set; }
    
        /// <summary>Order change increment value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("incrementValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? IncrementValue { get; set; }
    
        /// <summary>Information about items added to the order, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("itemsAdded", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ItemsAdded> ItemsAdded { get; set; }
    
        /// <summary>Information about items removed from the order, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("itemsRemoved", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ItemsRemoved> ItemsRemoved { get; set; }
    
        /// <summary>Order changes receipt information.</summary>
        [Newtonsoft.Json.JsonProperty("receipt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Receipt Receipt { get; set; } = new Receipt();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Stats1 
    {
        /// <summary>Stats total value.</summary>
        [Newtonsoft.Json.JsonProperty("totalValue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalValue TotalValue { get; set; } = new TotalValue();
    
        /// <summary>Stats total items.</summary>
        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalItems TotalItems { get; set; } = new TotalItems();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BodyFilterError
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"temp")]
        Temp = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"perm")]
        Perm = 2,
    
    }
    
    /// <summary>Information about an item being invoiced.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Items 
    {
        /// <summary>Index of the SKU being invoiced. The position starts in `0`, followed by `1`, `2`, and so on.</summary>
        [Newtonsoft.Json.JsonProperty("itemIndex", Required = Newtonsoft.Json.Required.Always)]
        public int ItemIndex { get; set; }
    
        /// <summary>Total price of the SKU being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public int Price { get; set; }
    
        /// <summary>Quantity of the SKU being invoiced.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ResponseOrigin
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Marketplace")]
        Marketplace = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fulfillment")]
        Fulfillment = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Chain")]
        Chain = 2,
    
    }
    
    /// <summary>Information on each order item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Items2 
    {
        /// <summary>Object containing product categories with the structure: `{CategoryID}: {CategoryName}`.</summary>
        [Newtonsoft.Json.JsonProperty("productCategories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ProductCategories { get; set; }
    
        /// <summary>Order item unique ID.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueId { get; set; }
    
        /// <summary>Item ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Product ID.</summary>
        [Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductId { get; set; }
    
        /// <summary>[Reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) ID.</summary>
        [Newtonsoft.Json.JsonProperty("lockId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LockId { get; set; }
    
        /// <summary>European Article Number (EAN) of the item.</summary>
        [Newtonsoft.Json.JsonProperty("ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }
    
        /// <summary>Item quantity.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        /// <summary>Seller name. When the store acts both as marketplace and seller, this field corresponds to `1`, because every VTEX store is its own seller 1.</summary>
        [Newtonsoft.Json.JsonProperty("seller", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Seller { get; set; }
    
        /// <summary>Seller SKU ID.</summary>
        [Newtonsoft.Json.JsonProperty("sellerSku", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerSku { get; set; }
    
        /// <summary>Item price expiration date and time in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("priceValidUntil", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PriceValidUntil { get; set; }
    
        /// <summary>SKU name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Item additional information.</summary>
        [Newtonsoft.Json.JsonProperty("additionalInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AdditionalInfo AdditionalInfo { get; set; }
    
        /// <summary>Information on [attachments](https://help.vtex.com/en/tutorial/what-is-an-attachment--aGICk0RVbqKg6GYmQcWUm).</summary>
        [Newtonsoft.Json.JsonProperty("attachments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Attachments> Attachments { get; set; }
    
        /// <summary>Array containing attachments details.</summary>
        [Newtonsoft.Json.JsonProperty("attachmentOfferings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttachmentOfferings> AttachmentOfferings { get; set; }
    
        /// <summary>Information about the item customization, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("assemblies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Assemblies { get; set; }
    
        /// <summary>Ref ID.</summary>
        [Newtonsoft.Json.JsonProperty("refId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefId { get; set; }
    
        /// <summary>Item shipping price in cents. This value does not account for the order total shipping price.</summary>
        [Newtonsoft.Json.JsonProperty("shippingPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ShippingPrice { get; set; }
    
        /// <summary>Item price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Price { get; set; }
    
        /// <summary>Selling price in cents. This field can present rounding discrepancies, so we recommend retrieving pricing information from the `priceDefinition` field.</summary>
        [Newtonsoft.Json.JsonProperty("sellingPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SellingPrice { get; set; }
    
        /// <summary>List price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("listPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ListPrice { get; set; }
    
        /// <summary>[Manual price](https://help.vtex.com/en/tutorial/change-the-price-of-an-item-in-the-shopping-cart--7Cd37aCAmtL1qmoZJJvjNf) in cents.</summary>
        [Newtonsoft.Json.JsonProperty("manualPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ManualPrice { get; set; }
    
        /// <summary>Tax value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Tax { get; set; }
    
        /// <summary>Reward value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("rewardValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RewardValue { get; set; }
    
        /// <summary>Freight commission value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("freightCommission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FreightCommission { get; set; }
    
        /// <summary>Commission value registered for the seller.</summary>
        [Newtonsoft.Json.JsonProperty("commission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Commission { get; set; }
    
        /// <summary>Information about price tags. A price tag is a price modifier, like s discount or a promotion applicable to the item in the order context.</summary>
        [Newtonsoft.Json.JsonProperty("priceTags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PriceTags> PriceTags { get; set; }
    
        /// <summary>Image URL.</summary>
        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUrl { get; set; }
    
        /// <summary>Detail URL.</summary>
        [Newtonsoft.Json.JsonProperty("detailUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailUrl { get; set; }
    
        /// <summary>Item components.</summary>
        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Components { get; set; }
    
        /// <summary>Information about services sold with the item. For example, a gift package.</summary>
        [Newtonsoft.Json.JsonProperty("bundleItems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BundleItems> BundleItems { get; set; }
    
        /// <summary>Information about offerings, which are services related to the item. For example, a warranty or installation.</summary>
        [Newtonsoft.Json.JsonProperty("offerings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Offerings { get; set; }
    
        /// <summary>Presale date and time in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("preSaleDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreSaleDate { get; set; }
    
        /// <summary>Defines it the item is a gift (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isGift", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsGift { get; set; }
    
        /// <summary> Item tax code.</summary>
        [Newtonsoft.Json.JsonProperty("taxCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaxCode { get; set; }
    
        /// <summary>Item measurement unit.</summary>
        [Newtonsoft.Json.JsonProperty("measurementUnit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MeasurementUnit { get; set; }
    
        /// <summary>Item unit multiplier.</summary>
        [Newtonsoft.Json.JsonProperty("unitMultiplier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UnitMultiplier { get; set; }
    
        /// <summary>Information about marketing and promotions, such as coupon code and [Urchin Tracking Module (UTM)](https://help.vtex.com/en/tutorial/what-are-utm-source-utm-campaign-and-utm-medium--2wTz7QJ8KUG6skGAoAQuii).</summary>
        [Newtonsoft.Json.JsonProperty("marketingData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MarketingData2 MarketingData { get; set; }
    
        /// <summary>When items are indexed in between each other, this field returns the assembly option ID. This response is `null` for items that are not [assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH).</summary>
        [Newtonsoft.Json.JsonProperty("parentAssemblyBinding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentAssemblyBinding { get; set; }
    
        /// <summary>Ranking number that shows how related items are indexed in between each other. It starts at `0` as the primary item reference and counts up to `1`, `2`, and so on. For example, a customer bought sunglasses and hired a warranty service. Since the sunglasses are index `0`, the warranty service (the [assembly option](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH)) is index `1` and has the `parentItemIndex` value `0`. This response is `null` for items that are not assembly options.</summary>
        [Newtonsoft.Json.JsonProperty("parentItemIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ParentItemIndex { get; set; }
    
        /// <summary>Identification code of the call center operator that sold the item, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("callCenterOperator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallCenterOperator { get; set; }
    
        /// <summary>Item price information.</summary>
        [Newtonsoft.Json.JsonProperty("priceDefinition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PriceDefinition PriceDefinition { get; set; }
    
        /// <summary>Item cost price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("costPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CostPrice { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SubscriptionData 
    {
        /// <summary>Subscription group ID. If this field returns `null` and the `executionCount` is `0`, the order is the first subscription order.</summary>
        [Newtonsoft.Json.JsonProperty("subscriptionGroupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubscriptionGroupId { get; set; }
    
        /// <summary>List with subscriptions details.</summary>
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Subscriptions> Subscriptions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TaxData 
    {
        /// <summary>Defines if the taxes were applied by the marketplace (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("areTaxesDesignatedByMarketplace", Required = Newtonsoft.Json.Required.Always)]
        public bool AreTaxesDesignatedByMarketplace { get; set; }
    
        /// <summary>Order taxes details.</summary>
        [Newtonsoft.Json.JsonProperty("taxInfoCollection", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TaxInfoCollection> TaxInfoCollection { get; set; } = new System.Collections.ObjectModel.Collection<TaxInfoCollection>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ClientProfileData2 
    {
        /// <summary>Client ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Id { get; set; }
    
        /// <summary>User profile ID.</summary>
        [Newtonsoft.Json.JsonProperty("userProfileId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UserProfileId { get; set; }
    
        /// <summary>User profile version.</summary>
        [Newtonsoft.Json.JsonProperty("userProfileVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserProfileVersion { get; set; }
    
        /// <summary>Client first name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FirstName { get; set; }
    
        /// <summary>Client last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string LastName { get; set; }
    
        /// <summary>Client email address.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }
    
        /// <summary>Client document code.</summary>
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Document { get; set; }
    
        /// <summary>If the client is a legal entity, this field includes the corporate document.</summary>
        [Newtonsoft.Json.JsonProperty("corporateDocument", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CorporateDocument { get; set; }
    
        /// <summary>If the client is a legal entity, this field includes the corporate name.</summary>
        [Newtonsoft.Json.JsonProperty("corporateName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CorporateName { get; set; }
    
        /// <summary>Client document type.</summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DocumentType { get; set; }
    
        /// <summary>Client telephone number.</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Phone { get; set; }
    
        /// <summary>If the client is a legal entity, this field includes the trade name.</summary>
        [Newtonsoft.Json.JsonProperty("tradeName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string TradeName { get; set; }
    
        /// <summary>If the client is a legal entity, this field includes the corporate state inscription.</summary>
        [Newtonsoft.Json.JsonProperty("stateInscription", Required = Newtonsoft.Json.Required.AllowNull)]
        public string StateInscription { get; set; }
    
        /// <summary>If the client is a legal entity, this field includes the corporate telephone number.</summary>
        [Newtonsoft.Json.JsonProperty("corporatePhone", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CorporatePhone { get; set; }
    
        /// <summary>Defines if the client is corporate and a legal entity (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isCorporate", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCorporate { get; set; }
    
        /// <summary>Customer class identification.</summary>
        [Newtonsoft.Json.JsonProperty("customerClass", Required = Newtonsoft.Json.Required.AllowNull)]
        public string CustomerClass { get; set; }
    
        /// <summary>Customer code.</summary>
        [Newtonsoft.Json.JsonProperty("customerCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GiftRegistryData 
    {
        /// <summary>Gift list ID.</summary>
        [Newtonsoft.Json.JsonProperty("giftRegistryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GiftRegistryId { get; set; }
    
        /// <summary>[Gift list type](https://help.vtex.com/en/tutorial/creating-a-type-of-list).</summary>
        [Newtonsoft.Json.JsonProperty("giftRegistryType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GiftRegistryType { get; set; }
    
        /// <summary>Gift list type name.</summary>
        [Newtonsoft.Json.JsonProperty("giftRegistryTypeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GiftRegistryTypeName { get; set; }
    
        /// <summary>Gift list shipping address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressId { get; set; }
    
        /// <summary>Gift list description.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CallCenterOperatorData 
    {
        /// <summary>Call center operator identification code.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Call center operator email.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>Call center operator user name.</summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SalesChannelData 
    {
        /// <summary>Three-digit country code, in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        /// <summary>Currency code in [ISO 4217](https://www.iban.com/currency-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }
    
        /// <summary>Currency format details.</summary>
        [Newtonsoft.Json.JsonProperty("currencyFormatInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyFormatInfo CurrencyFormatInfo { get; set; }
    
        /// <summary>Information about the culture.</summary>
        [Newtonsoft.Json.JsonProperty("cultureInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CultureInfo { get; set; }
    
        /// <summary>Currency Locale Code in [LCID](https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a) format.</summary>
        [Newtonsoft.Json.JsonProperty("currencyLocale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CurrencyLocale { get; set; }
    
        /// <summary>Currency symbol.</summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencySymbol { get; set; }
    
        /// <summary>Time zone where the order was created.</summary>
        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZone { get; set; }
    
        /// <summary>Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Store name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Defines if the sales channel is active (`true`) or inactive (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsActive { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomData 
    {
        /// <summary>Customizable apps created by the store.</summary>
        [Newtonsoft.Json.JsonProperty("customApps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CustomApps { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChangesAttachment2 
    {
        /// <summary>Order changes ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Order changes details.</summary>
        [Newtonsoft.Json.JsonProperty("changesData", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ChangesData2> ChangesData { get; set; } = new System.Collections.ObjectModel.Collection<ChangesData2>();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ShippingData2 
    {
        /// <summary>Shipping address details.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Address4 Address { get; set; } = new Address4();
    
        /// <summary>Logistics information regarding order items.</summary>
        [Newtonsoft.Json.JsonProperty("logisticsInfo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LogisticsInfo2> LogisticsInfo { get; set; } = new System.Collections.ObjectModel.Collection<LogisticsInfo2>();
    
        /// <summary>Order shipping label information.</summary>
        [Newtonsoft.Json.JsonProperty("trackingHints", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<TrackingHints2> TrackingHints { get; set; }
    
        /// <summary>Selected adresses information.</summary>
        [Newtonsoft.Json.JsonProperty("selectedAddresses", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SelectedAddresses2> SelectedAddresses { get; set; } = new System.Collections.ObjectModel.Collection<SelectedAddresses2>();
    
        /// <summary>Available adresses information.</summary>
        [Newtonsoft.Json.JsonProperty("availableAddresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableAddresses2> AvailableAddresses { get; set; }
    
        /// <summary>Order contact information.</summary>
        [Newtonsoft.Json.JsonProperty("contactInformation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContactInformation2> ContactInformation { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PackageAttachment 
    {
        /// <summary>List with packages' information.</summary>
        [Newtonsoft.Json.JsonProperty("packages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Packages> Packages { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Marketplace 
    {
        /// <summary>Marketplace base URL.</summary>
        [Newtonsoft.Json.JsonProperty("baseURL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseURL { get; set; }
    
        /// <summary>Defines if the marketplace is a [VTEX certified marketplace](https://help.vtex.com/en/tutorial/marketplace-strategies-at-vtex--tutorials_402#integrating-with-certified-marketplaces) (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isCertified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsCertified { get; set; }
    
        /// <summary>Marketplace name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContextData 
    {
        /// <summary>Defines if the user was logged in the account or not (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("loggedIn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LoggedIn { get; set; }
    
        /// <summary>Defines if in order placement the user had access to the order form enabled by the [License Manager](https://help.vtex.com/en/tutorial/license-manager-resources--3q6ztrC8YynQf6rdc6euk3) (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("hasAccessToOrderFormEnabledByLicenseManager", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasAccessToOrderFormEnabledByLicenseManager { get; set; }
    
        /// <summary>User agent name.</summary>
        [Newtonsoft.Json.JsonProperty("userAgent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserAgent { get; set; }
    
        /// <summary>User ID.</summary>
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WorkflowData 
    {
        /// <summary>Order processing details.</summary>
        [Newtonsoft.Json.JsonProperty("instances", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Instances> Instances { get; set; }
    
        /// <summary>Workflow processing index, starting from `0`.</summary>
        [Newtonsoft.Json.JsonProperty("mainFlowIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MainFlowIndex { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ClientPreferencesData 
    {
        /// <summary>Language code of the customer preferred language while accessing the store.</summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }
    
        /// <summary>Defines if the customer receives the store's newsletter (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("optinNewsLetter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OptinNewsLetter { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Details about the order totals.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Totals 
    {
        /// <summary>Total ID, which defines what the total is about.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TotalsId Id { get; set; }
    
        /// <summary>Total name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Total value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Value { get; set; }
    
        /// <summary>Information about the order alternative totals, when applicable. For example, when there is a discount for items in the marketplace that results in a difference in the `Items` total value, the `alternativeTotals` can retrieve details about it.</summary>
        [Newtonsoft.Json.JsonProperty("alternativeTotals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlternativeTotals> AlternativeTotals { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReceiptData 
    {
        /// <summary>Collection of receipts.</summary>
        [Newtonsoft.Json.JsonProperty("receiptCollection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReceiptCollection> ReceiptCollection { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a given seller.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Sellers 
    {
        /// <summary>Seller identifier.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Seller name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Seller logo URL.</summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }
    
        /// <summary>URL of the endpoint for fulfillment of seller's orders, which the marketplace use to communicate with the seller.</summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentEndpoint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FulfillmentEndpoint { get; set; }
    
        /// <summary>Sub seller ID. When the main account acts both as seller and marketplace, this field will return the value `1`.</summary>
        [Newtonsoft.Json.JsonProperty("subSellerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubSellerId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketingData 
    {
        /// <summary>A UTM is an Urchin Tracking Module used to track traffic related to your store. This field is an UTM for tracking the traffic source, to know from which site, advertiser, or publication the customer came before reaching your site.</summary>
        [Newtonsoft.Json.JsonProperty("utmSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmSource { get; set; }
    
        /// <summary>UTM for tracking the advertising or marketing media used to reach your site, such as banners and newsletters.</summary>
        [Newtonsoft.Json.JsonProperty("utmMedium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmMedium { get; set; }
    
        /// <summary>UTM for tracking the marketing campaign context.</summary>
        [Newtonsoft.Json.JsonProperty("utmCampaign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmCampaign { get; set; }
    
        /// <summary>UTM for tracking the partner.</summary>
        [Newtonsoft.Json.JsonProperty("utmPartner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmPartner { get; set; }
    
        /// <summary>A `utmi` is an internal Urchin Tracking Module (UTM) used to track traffic inside your site. This field is an internal UTM for tracking pages.</summary>
        [Newtonsoft.Json.JsonProperty("utmipage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Utmipage { get; set; }
    
        /// <summary>Internal UTM for tracking the partner.</summary>
        [Newtonsoft.Json.JsonProperty("utmiPart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmiPart { get; set; }
    
        /// <summary>Internal UTM for tracking the marketing campaign context.</summary>
        [Newtonsoft.Json.JsonProperty("utmiCampaign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmiCampaign { get; set; }
    
        /// <summary>Coupon code used by the customer.</summary>
        [Newtonsoft.Json.JsonProperty("coupon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Coupon { get; set; }
    
        /// <summary>List of marketing tags valid for the order.</summary>
        [Newtonsoft.Json.JsonProperty("marketingTags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MarketingTags { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RatesAndBenefitsData 
    {
        /// <summary>List of promotions and taxes.</summary>
        [Newtonsoft.Json.JsonProperty("rateAndBenefitsIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RateAndBenefitsIdentifiers> RateAndBenefitsIdentifiers { get; set; }
    
        /// <summary>List of promotion teasers.</summary>
        [Newtonsoft.Json.JsonProperty("teaser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Teaser> Teaser { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PaymentData 
    {
        /// <summary>[Gift cards](https://developers.vtex.com/docs/guides/gift-card-integration-guide) information, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("giftCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GiftCards> GiftCards { get; set; }
    
        /// <summary>Information about the order financial transactions.</summary>
        [Newtonsoft.Json.JsonProperty("transactions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transactions> Transactions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvoiceData 
    {
        /// <summary>Invoice address information.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address5 Address { get; set; }
    
        /// <summary>Invoice information regarding payment method.</summary>
        [Newtonsoft.Json.JsonProperty("userPaymentInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserPaymentInfo UserPaymentInfo { get; set; }
    
        /// <summary>List with the order settled invoices.</summary>
        [Newtonsoft.Json.JsonProperty("settleInvoices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SettleInvoices { get; set; }
    
        /// <summary>Information about the invoice subject.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceSubject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InvoiceSubject InvoiceSubject { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StorePreferencesData 
    {
        /// <summary>Country code in three-digit [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        /// <summary>Currency code in [ISO 4217](https://www.iban.com/currency-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }
    
        /// <summary>Currency format settings.</summary>
        [Newtonsoft.Json.JsonProperty("currencyFormatInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CurrencyFormatInfo2 CurrencyFormatInfo { get; set; }
    
        /// <summary>Currency locale code in [LCID](https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a) format.</summary>
        [Newtonsoft.Json.JsonProperty("currencyLocale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CurrencyLocale { get; set; }
    
        /// <summary>Currency symbol characters.</summary>
        [Newtonsoft.Json.JsonProperty("currencySymbol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencySymbol { get; set; }
    
        /// <summary>Time zone considered for the store orders.</summary>
        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZone { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemMetadata 
    {
        /// <summary>Metadata details about items.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Items3> Items { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ResponseCreationEnvironment
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BETA")]
        BETA = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STABLE")]
        STABLE = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CancellationData 
    {
        /// <summary>Defines if the order cancellation was requested by the customer (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("requestedByUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RequestedByUser { get; set; }
    
        /// <summary>Defines if the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.</summary>
        [Newtonsoft.Json.JsonProperty("requestedBySystem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequestedBySystem { get; set; }
    
        /// <summary>Defines if the order cancellation was requested by the seller (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("requestedBySellerNotification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequestedBySellerNotification { get; set; }
    
        /// <summary>Defines if the order cancellation was requested by the payment gateway (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("requestedByPaymentNotification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequestedByPaymentNotification { get; set; }
    
        /// <summary>Reason why the order was canceled.</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        /// <summary>Order cancellation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("cancellationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancellationDate { get; set; }
    
        /// <summary>ID that identifies the cancellation operation.</summary>
        [Newtonsoft.Json.JsonProperty("cancellationRequestId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancellationRequestId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about the seller denial to a given order cancellation request.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CancellationRequests 
    {
        /// <summary>ID that identifies the original cancellation operation made by the marketplaces or its customer care service using the [Cancel order](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/oms/pvt/orders/-orderId-/cancel) endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Reason why there was a request to cancel the order.</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        /// <summary>Date of when the order cancellation request was processed by the platform. The date format is [ISO 8601 time zone offset](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("cancellationRequestDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancellationRequestDate { get; set; }
    
        /// <summary>Defines if the order cancellation was requested by the customer (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("requestedByUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RequestedByUser { get; set; }
    
        /// <summary>Defines if the order cancellation request was [denied by the seller](https://developers.vtex.com/docs/guides/order-canceling-improvements) (`true`) or accepted by the seller (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("deniedBySeller", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DeniedBySeller { get; set; }
    
        /// <summary>Reason given by the seller for denying the order cancellation.</summary>
        [Newtonsoft.Json.JsonProperty("deniedBySellerReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeniedBySellerReason { get; set; }
    
        /// <summary>Date of when the platform processed the seller denial to an order cancellation request. The date format is [ISO 8601 time zone offset](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("cancellationRequestDenyDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CancellationRequestDenyDate { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about an order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class List 
    {
        /// <summary>Payment system name.</summary>
        [Newtonsoft.Json.JsonProperty("paymentNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentNames { get; set; }
    
        /// <summary>Order ID.</summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }
    
        /// <summary>Order group ID.</summary>
        [Newtonsoft.Json.JsonProperty("orderGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderGroup { get; set; }
    
        /// <summary>Sequence number part of the order ID. For example, in order `v71041992str-01`, the sequence is `71041992`.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sequence { get; set; }
    
        /// <summary>Customer email.</summary>
        [Newtonsoft.Json.JsonProperty("clientEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientEmail { get; set; }
    
        /// <summary>Customer document number.</summary>
        [Newtonsoft.Json.JsonProperty("clientDocument", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientDocument { get; set; }
    
        /// <summary>Corporate document, if the customer is a legal entity.</summary>
        [Newtonsoft.Json.JsonProperty("clientCorporateDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientCorporateDocument { get; set; }
    
        /// <summary>Corporate name, if the customer is a legal entity.</summary>
        [Newtonsoft.Json.JsonProperty("clientCorporateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientCorporateName { get; set; }
    
        /// <summary>Customer name.</summary>
        [Newtonsoft.Json.JsonProperty("clientName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientName { get; set; }
    
        /// <summary>Order total value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("totalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalValue { get; set; }
    
        /// <summary>Order's origin in the [order flow](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).</summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListOrigin Origin { get; set; }
    
        /// <summary>[Order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196) in the workflow.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Currency code in [ISO 4217](https://www.iban.com/currency-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }
    
        /// <summary>Names of the sellers responsible for order fuflillment.</summary>
        [Newtonsoft.Json.JsonProperty("sellerNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SellerNames { get; set; }
    
        /// <summary>IDs of the sellers responsible for order fuflillment.</summary>
        [Newtonsoft.Json.JsonProperty("sellerIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SellerIds { get; set; }
    
        /// <summary>Seller order ID.</summary>
        [Newtonsoft.Json.JsonProperty("sellerOrderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SellerOrderId { get; set; }
    
        /// <summary>Order total quantity of items.</summary>
        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalItems { get; set; }
    
        /// <summary>List with the PCI transaction ID.</summary>
        [Newtonsoft.Json.JsonProperty("pciTransactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PciTransactionId { get; set; }
    
        /// <summary>Unique sequence number that identifies a sales transaction using cards.</summary>
        [Newtonsoft.Json.JsonProperty("paymentNSU", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PaymentNSU { get; set; }
    
        /// <summary>List of the promotions and taxes names valid for the purchase.</summary>
        [Newtonsoft.Json.JsonProperty("ratesAndBenefitsNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RatesAndBenefitsNames { get; set; }
    
        /// <summary>List of the promotions and taxes IDs valid for the purchase.</summary>
        [Newtonsoft.Json.JsonProperty("ratesAndBenefitsIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RatesAndBenefitsIds { get; set; }
    
        /// <summary>Maximum shipping estimated date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("shippingEstimatedDateMax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingEstimatedDateMax { get; set; }
    
        /// <summary>Minimum shipping estimated date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("shippingEstimatedDateMin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingEstimatedDateMin { get; set; }
    
        /// <summary>Array with payment transaction IDs information.</summary>
        [Newtonsoft.Json.JsonProperty("transactionIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TransactionIds { get; set; }
    
        /// <summary>Array with payment IDs information.</summary>
        [Newtonsoft.Json.JsonProperty("paymentIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PaymentIds { get; set; }
    
        /// <summary>Defines if the order was placed via [VTEX Sales App](https://help.vtex.com/en/tracks/instore-getting-started-and-setting-up--zav76TFEZlAjnyBVL5tRc) (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isInstore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsInstore { get; set; }
    
        /// <summary>List of delivery channels, which can be delivery or [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).</summary>
        [Newtonsoft.Json.JsonProperty("deliveryChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<DeliveryChannel> DeliveryChannel { get; set; }
    
        /// <summary>List of product IDs related to the orders items.</summary>
        [Newtonsoft.Json.JsonProperty("productIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProductIds { get; set; }
    
        /// <summary>Main [account name](https://help.vtex.com/en/tutorial/what-is-an-account-name--i0mIGLcg3QyEy8OCicEoC).</summary>
        [Newtonsoft.Json.JsonProperty("hostname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hostname { get; set; }
    
        /// <summary>Order creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreationDate { get; set; }
    
        /// <summary>Order invoice date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("invoicedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoicedDate { get; set; }
    
        /// <summary>Order authorization date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("authorizedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorizedDate { get; set; }
    
        /// <summary>Defines if the order is complete (`true`) or [incomplete](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294) (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("orderIsComplete", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OrderIsComplete { get; set; }
    
        /// <summary>List of marketing tags valid for the order.</summary>
        [Newtonsoft.Json.JsonProperty("marketingTags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MarketingTags { get; set; }
    
        /// <summary>Information about order invoice `Output` operation, when the store sells an item to the customer.</summary>
        [Newtonsoft.Json.JsonProperty("invoicesOutput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> InvoicesOutput { get; set; }
    
        /// <summary>Information about order invoice `Input` operation, when the customer returnes an item to the store.</summary>
        [Newtonsoft.Json.JsonProperty("invoicesInput", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> InvoicesInput { get; set; }
    
        /// <summary>Defines if the order processing in the workflow is in error (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("workflowInErrorState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WorkflowInErrorState { get; set; }
    
        /// <summary>Defines if the order is in automatic processing retry in the workflow (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("workflowInRetry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WorkflowInRetry { get; set; }
    
        /// <summary>User profile ID.</summary>
        [Newtonsoft.Json.JsonProperty("userProfileId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserProfileId { get; set; }
    
        /// <summary>Order last change date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("lastChange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastChange { get; set; }
    
        /// <summary>Defines if all order items have being delivered (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isAllDelivered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAllDelivered { get; set; }
    
        /// <summary>Defines if any order item has being delivered (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isAnyDelivered", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAnyDelivered { get; set; }
    
        /// <summary>Order [gift card](https://developers.vtex.com/docs/guides/gift-card-integration-guide) information, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("giftCardProviders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GiftCardProviders { get; set; }
    
        /// <summary>ID of the shopping cart from which the order was created.</summary>
        [Newtonsoft.Json.JsonProperty("orderFormId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderFormId { get; set; }
    
        /// <summary>Payment approval date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("paymentApprovedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentApprovedDate { get; set; }
    
        /// <summary>Order ready for handling date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("readyForHandlingDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReadyForHandlingDate { get; set; }
    
        /// <summary>Array with delivery date information.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryDates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DeliveryDates { get; set; }
    
        /// <summary>Array with order processing metadata.</summary>
        [Newtonsoft.Json.JsonProperty("ingestPipelineMetadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IngestPipelineMetadata { get; set; }
    
        /// <summary>Marketplace workflow instance ID.</summary>
        [Newtonsoft.Json.JsonProperty("marketplaceWorkflowInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketplaceWorkflowInstanceId { get; set; }
    
        /// <summary>Seller workflow instance ID.</summary>
        [Newtonsoft.Json.JsonProperty("fulfillmentWorkflowInstanceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FulfillmentWorkflowInstanceId { get; set; }
    
        /// <summary>Email of the call center operator responsible for the order, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("callCenterOperatorEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallCenterOperatorEmail { get; set; }
    
        /// <summary>Name of the call center operator responsible for the order, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("callCenterOperatorName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallCenterOperatorName { get; set; }
    
        /// <summary>List of the order product names.</summary>
        [Newtonsoft.Json.JsonProperty("productNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProductNames { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Paging 
    {
        /// <summary>Total number of objects that exist for the `list` field, each corresponding to an order.</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }
    
        /// <summary>Total number of pages.</summary>
        [Newtonsoft.Json.JsonProperty("pages", Required = Newtonsoft.Json.Required.Always)]
        public int Pages { get; set; }
    
        /// <summary>Number of the current page.</summary>
        [Newtonsoft.Json.JsonProperty("currentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }
    
        /// <summary>Number of objects per page that can be returned for the `list` field. The default value is `15` and the maximum value is `100`.</summary>
        [Newtonsoft.Json.JsonProperty("perPage", Required = Newtonsoft.Json.Required.Always)]
        public int PerPage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Stats2 
    {
        /// <summary>Stats object.</summary>
        [Newtonsoft.Json.JsonProperty("stats", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Stats3 Stats { get; set; } = new Stats3();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Address2AddressType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"residential")]
        Residential = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
        Pickup = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PickupStoreInfo2 
    {
        /// <summary>Defines if the shipping type was pickup (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isPickupStore", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPickupStore { get; set; }
    
        /// <summary>Name of the pickup point displayed at checkout.</summary>
        [Newtonsoft.Json.JsonProperty("friendlyName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FriendlyName { get; set; }
    
        /// <summary>Pickup point address information.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.AllowNull)]
        public Address6 Address { get; set; }
    
        /// <summary>Additional information.</summary>
        [Newtonsoft.Json.JsonProperty("additionalInfo", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AdditionalInfo { get; set; }
    
        /// <summary>ID of the loading dock related to the pickup point.</summary>
        [Newtonsoft.Json.JsonProperty("dockId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DockId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LogisticsInfoDeliveryChannel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
        Delivery = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup-in-point")]
        PickupInPoint = 1,
    
    }
    
    /// <summary>Information about a delivery ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeliveryIds 
    {
        /// <summary>Carrier ID.</summary>
        [Newtonsoft.Json.JsonProperty("courierId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourierId { get; set; }
    
        /// <summary>[Warehouse](https://help.vtex.com/en/tutorial/warehouse--6oIxvsVDTtGpO7y6zwhGpb) ID.</summary>
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseId { get; set; }
    
        /// <summary>[Loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) ID.</summary>
        [Newtonsoft.Json.JsonProperty("dockId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DockId { get; set; }
    
        /// <summary>Carrier name.</summary>
        [Newtonsoft.Json.JsonProperty("courierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourierName { get; set; }
    
        /// <summary>Quantity of items being delivered.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        /// <summary>Total list price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("totalListPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalListPrice { get; set; }
    
        /// <summary>Account carrier name.</summary>
        [Newtonsoft.Json.JsonProperty("accountCarrierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountCarrierName { get; set; }
    
        /// <summary>Information about [kit](https://help.vtex.com/tutorial/what-is-a-kit--5ov5s3eHM4AqAAgqWwoc28) items, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("kitItemDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> KitItemDetails { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Delivery channel information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeliveryChannels 
    {
        /// <summary>Delivery channel shipping type.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeliveryChannelsId Id { get; set; }
    
        /// <summary>Stock check for SKU availability.</summary>
        [Newtonsoft.Json.JsonProperty("stockBalance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StockBalance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Service Level Agreement (SLA) information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Slas 
    {
        /// <summary>[Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID related to the SLA.</summary>
        [Newtonsoft.Json.JsonProperty("pickupPointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PickupPointId { get; set; }
    
        /// <summary>Information about a [loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) that was transformed into a [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).</summary>
        [Newtonsoft.Json.JsonProperty("pickupStoreInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PickupStoreInfo3 PickupStoreInfo { get; set; }
    
        /// <summary>SLA tax information.</summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Tax { get; set; }
    
        /// <summary>SLA shipping list price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("listPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ListPrice { get; set; }
    
        /// <summary>SLA shipping price in cents. Does not account for the order total shipping price.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Price { get; set; }
    
        /// <summary>[Delivery window](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryWindow { get; set; }
    
        /// <summary>Available delivery windows information, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("availableDeliveryWindows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AvailableDeliveryWindows { get; set; }
    
        /// <summary>Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time related to the SLA.</summary>
        [Newtonsoft.Json.JsonProperty("lockTTL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LockTTL { get; set; }
    
        /// <summary>SLA shipping estimate date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("shippingEstimateDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingEstimateDate { get; set; }
    
        /// <summary>Shipping estimate time in days. For instance, three business days is represented `3bd`.</summary>
        [Newtonsoft.Json.JsonProperty("shippingEstimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingEstimate { get; set; }
    
        /// <summary>SLA delivery IDs information.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeliveryIds2> DeliveryIds { get; set; }
    
        /// <summary>[Shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Defines if the delivery channel is delivery or [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).</summary>
        [Newtonsoft.Json.JsonProperty("deliveryChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SlasDeliveryChannel DeliveryChannel { get; set; }
    
        /// <summary>ID of the shipping method used in the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Distance in kilometers between the pickup point and the customer address. The distance is measured as a straight line.</summary>
        [Newtonsoft.Json.JsonProperty("pickupDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PickupDistance { get; set; }
    
        /// <summary>Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.</summary>
        [Newtonsoft.Json.JsonProperty("polygonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolygonName { get; set; }
    
        /// <summary>Number of days the carrier takes in transit to deliver the order. For instance, three business days is represented `3bd`.</summary>
        [Newtonsoft.Json.JsonProperty("transitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LogisticsInfoSelectedDeliveryChannel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
        Delivery = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup-in-point")]
        PickupInPoint = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SelectedAddressesAddressType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"residential")]
        Residential = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
        Pickup = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AvailableAddressesAddressType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"residential")]
        Residential = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
        Pickup = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Location 
    {
        /// <summary>Latitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }
    
        /// <summary>Longitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about an item added to the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemsAdded 
    {
        /// <summary>Added item SKU ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Added item SKU name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Quantity of items added.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        /// <summary>Added item price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Price { get; set; }
    
        /// <summary>Added item unit multiplier.</summary>
        [Newtonsoft.Json.JsonProperty("unitMultiplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitMultiplier { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about an item removed from the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemsRemoved 
    {
        /// <summary>Removed item SKU ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Removed item name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Quantity of removed items.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
        /// <summary>Removed item price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public int Price { get; set; }
    
        /// <summary>Removed item unit multiplier.</summary>
        [Newtonsoft.Json.JsonProperty("unitMultiplier", Required = Newtonsoft.Json.Required.AllowNull)]
        public string UnitMultiplier { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Receipt 
    {
        /// <summary>Receipt creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Date { get; set; }
    
        /// <summary>Order ID.</summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }
    
        /// <summary>Receipt unique identifier code.</summary>
        [Newtonsoft.Json.JsonProperty("receipt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Receipt1 { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TotalValue 
    {
        /// <summary>Value count.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum value.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Value mean.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum value.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing values.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of values.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Value sum of squares.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to total values.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Facets Facets { get; set; } = new Facets();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TotalItems 
    {
        /// <summary>Items count.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum items.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Total items mean.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum items.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing items.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of items.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Items sum of squares.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to total items.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public Facets2 Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AdditionalInfo 
    {
        /// <summary>Item brand name.</summary>
        [Newtonsoft.Json.JsonProperty("brandName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandName { get; set; }
    
        /// <summary>Item brand ID.</summary>
        [Newtonsoft.Json.JsonProperty("brandId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandId { get; set; }
    
        /// <summary>Categories IDs.</summary>
        [Newtonsoft.Json.JsonProperty("categoriesIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoriesIds { get; set; }
    
        /// <summary>Item dimensions.</summary>
        [Newtonsoft.Json.JsonProperty("dimension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dimension Dimension { get; set; }
    
        /// <summary>All product clusters related to the item.</summary>
        [Newtonsoft.Json.JsonProperty("productClusterId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductClusterId { get; set; }
    
        /// <summary>Commercial condition ID.</summary>
        [Newtonsoft.Json.JsonProperty("commercialConditionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommercialConditionId { get; set; }
    
        /// <summary>Offering information.</summary>
        [Newtonsoft.Json.JsonProperty("offeringInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfferingInfo { get; set; }
    
        /// <summary>Offering type.</summary>
        [Newtonsoft.Json.JsonProperty("offeringType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfferingType { get; set; }
    
        /// <summary>Offering type ID.</summary>
        [Newtonsoft.Json.JsonProperty("offeringTypeId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfferingTypeId { get; set; }
    
        /// <summary>Item [categories](https://help.vtex.com/tracks/catalog-101--5AF0XfnjfWeopIFBgs3LIQ/2gkZDjXRqfsq62TlAkj4uf) information.</summary>
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Categories> Categories { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a given attachment.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Attachments 
    {
        /// <summary>Attachment name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Custom field for attachment content.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Content { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Attachment details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AttachmentOfferings 
    {
        /// <summary>Attachment name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Defines if the attachment is required (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Required { get; set; }
    
        /// <summary>Schema of the content declared in the field `attachmentOfferings`.</summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Schema { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a given price tag.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PriceTags 
    {
        /// <summary>Price tag name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Price tag raw value.</summary>
        [Newtonsoft.Json.JsonProperty("rawValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RawValue { get; set; }
    
        /// <summary>Indicates whether price tag value is applied through a percentage (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isPercentual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPercentual { get; set; }
    
        /// <summary>Price tag identifier.</summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        /// <summary>Price tag value.</summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rate { get; set; }
    
        /// <summary>Juris code.</summary>
        [Newtonsoft.Json.JsonProperty("jurisCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JurisCode { get; set; }
    
        /// <summary>Juris type.</summary>
        [Newtonsoft.Json.JsonProperty("jurisType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JurisType { get; set; }
    
        /// <summary>Juris name.</summary>
        [Newtonsoft.Json.JsonProperty("jurisName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JurisName { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a given service.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BundleItems 
    {
        /// <summary>Service type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Service ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Service name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Service price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Price { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MarketingData2 
    {
        /// <summary>A UTM is an Urchin Tracking Module used to track traffic related to your store. This field is an UTM for tracking the traffic source, to know from which site, advertiser, or publication the customer came before reaching your site.</summary>
        [Newtonsoft.Json.JsonProperty("utmSource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmSource { get; set; }
    
        /// <summary>UTM for tracking the advertising or marketing media used to reach your site, such as banners and newsletters.</summary>
        [Newtonsoft.Json.JsonProperty("utmMedium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmMedium { get; set; }
    
        /// <summary>UTM for tracking the marketing campaign context.</summary>
        [Newtonsoft.Json.JsonProperty("utmCampaign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmCampaign { get; set; }
    
        /// <summary>UTM for tracking the partner.</summary>
        [Newtonsoft.Json.JsonProperty("utmPartner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmPartner { get; set; }
    
        /// <summary>A `utmi` is an internal Urchin Tracking Module (UTM) used to track traffic inside your site. This field is an internal UTM for tracking pages.</summary>
        [Newtonsoft.Json.JsonProperty("utmipage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Utmipage { get; set; }
    
        /// <summary>Internal UTM for tracking the partner.</summary>
        [Newtonsoft.Json.JsonProperty("utmiPart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmiPart { get; set; }
    
        /// <summary>Internal UTM for tracking the marketing campaign context.</summary>
        [Newtonsoft.Json.JsonProperty("utmiCampaign", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UtmiCampaign { get; set; }
    
        /// <summary>Coupon code used by the customer.</summary>
        [Newtonsoft.Json.JsonProperty("coupon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Coupon { get; set; }
    
        /// <summary>List of marketing tags valid for the item.</summary>
        [Newtonsoft.Json.JsonProperty("marketingTags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> MarketingTags { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PriceDefinition 
    {
        /// <summary>Item calculated selling price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("calculatedSellingPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CalculatedSellingPrice { get; set; }
    
        /// <summary>Item total price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }
    
        /// <summary>Item selling prices.</summary>
        [Newtonsoft.Json.JsonProperty("sellingPrices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SellingPrices> SellingPrices { get; set; }
    
        /// <summary>Item price definition reason.</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Subscription details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Subscriptions 
    {
        /// <summary>Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on.</summary>
        [Newtonsoft.Json.JsonProperty("executionCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ExecutionCount { get; set; }
    
        /// <summary>Value of the order when the customer subscribed. Subscriptions created via VTEX Admin or [Subscriptions API](https://developers.vtex.com/docs/api-reference/subscriptions-api-v3) do not have an original order, so this field returns `0.0`.</summary>
        [Newtonsoft.Json.JsonProperty("priceAtSubscriptionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PriceAtSubscriptionDate { get; set; }
    
        /// <summary>Each item in the subscription order is identified by an index. The position starts in `0`, followed by `1`, `2`, and so on.</summary>
        [Newtonsoft.Json.JsonProperty("itemIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemIndex { get; set; }
    
        /// <summary>Information about the [subscription plan](https://help.vtex.com/en/tutorial/subscription-plans-beta--5kczKRqHEsrs1tYtRcY8wR).</summary>
        [Newtonsoft.Json.JsonProperty("plan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Plan Plan { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a given tax.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TaxInfoCollection 
    {
        /// <summary>Item indexing number.</summary>
        [Newtonsoft.Json.JsonProperty("itemIndex", Required = Newtonsoft.Json.Required.Always)]
        public int ItemIndex { get; set; }
    
        /// <summary>SKU ID.</summary>
        [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sku { get; set; }
    
        /// <summary>Information about order taxes.</summary>
        [Newtonsoft.Json.JsonProperty("priceTags", Required = Newtonsoft.Json.Required.AllowNull)]
        public PriceTags2 PriceTags { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyFormatInfo 
    {
        /// <summary>Quantity of currency decimal digits.</summary>
        [Newtonsoft.Json.JsonProperty("CurrencyDecimalDigits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CurrencyDecimalDigits { get; set; }
    
        /// <summary>Defines what currency decimal separator will be applied.</summary>
        [Newtonsoft.Json.JsonProperty("CurrencyDecimalSeparator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyDecimalSeparator { get; set; }
    
        /// <summary>Defines what currency group separator will be applied.</summary>
        [Newtonsoft.Json.JsonProperty("CurrencyGroupSeparator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyGroupSeparator { get; set; }
    
        /// <summary>Defines how many characters will be grouped.</summary>
        [Newtonsoft.Json.JsonProperty("CurrencyGroupSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CurrencyGroupSize { get; set; }
    
        /// <summary>Defines if all prices will be initiated with the currency symbol (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("StartsWithCurrencySymbol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool StartsWithCurrencySymbol { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Details about an order change.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChangesData2 
    {
        /// <summary>Text explaining why the order was changed. This information may be shown to the customer in the storefront or transactional emails.</summary>
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Reason { get; set; }
    
        /// <summary>Order change discount value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("discountValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? DiscountValue { get; set; }
    
        /// <summary>Order change increment value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("incrementValue", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? IncrementValue { get; set; }
    
        /// <summary>Information about items added to the order, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("itemsAdded", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ItemsAdded2> ItemsAdded { get; set; }
    
        /// <summary>Information about items removed from the order, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("itemsRemoved", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Collections.Generic.ICollection<ItemsRemoved2> ItemsRemoved { get; set; }
    
        /// <summary>Order changes receipt information.</summary>
        [Newtonsoft.Json.JsonProperty("receipt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Receipt2 Receipt { get; set; } = new Receipt2();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address4 
    {
        /// <summary>Shipping address type.</summary>
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Address4AddressType AddressType { get; set; }
    
        /// <summary>Full name of the order receiver.</summary>
        [Newtonsoft.Json.JsonProperty("receiverName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReceiverName { get; set; }
    
        /// <summary>Shipping address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AddressId { get; set; }
    
        /// <summary>Shipping address version ID.</summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }
    
        /// <summary>Shipping address entity ID.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        /// <summary>Shipping address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PostalCode { get; set; }
    
        /// <summary>Shipping address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string City { get; set; }
    
        /// <summary>Shipping address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State { get; set; }
    
        /// <summary>Shipping address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }
    
        /// <summary>Shipping address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Street { get; set; }
    
        /// <summary>Shipping address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Number { get; set; }
    
        /// <summary>Shipping address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Neighborhood { get; set; }
    
        /// <summary>Shipping address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Complement { get; set; }
    
        /// <summary>Shipping address additional information.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Reference { get; set; }
    
        /// <summary>Shipping address pair of geolocation coordinates, first longitude then latitude.</summary>
        [Newtonsoft.Json.JsonProperty("geoCoordinates", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<double> GeoCoordinates { get; set; } = new System.Collections.ObjectModel.Collection<double>();
    
        /// <summary>Contact unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Logistics information about an item.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogisticsInfo2 
    {
        /// <summary>Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).</summary>
        [Newtonsoft.Json.JsonProperty("polygonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolygonName { get; set; }
    
        /// <summary>Shipping estimate time in days. For instance, three business days is represented `3bd`.</summary>
        [Newtonsoft.Json.JsonProperty("shippingEstimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingEstimate { get; set; }
    
        /// <summary>Shipping address entity ID.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        /// <summary>Shipping address version ID.</summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }
    
        /// <summary>Information about a [loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) that was transformed into a [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).</summary>
        [Newtonsoft.Json.JsonProperty("pickupStoreInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PickupStoreInfo4 PickupStoreInfo { get; set; }
    
        /// <summary>[Scheduled delivery](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) window information, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryWindow { get; set; }
    
        /// <summary>Item selling price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("sellingPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SellingPrice { get; set; }
    
        /// <summary>Item [list price](https://help.vtex.com/en/tracks/prices-101--6f8pwCns3PJHqMvQSugNfP/3XcXp0r5WrJvogB8KIX4Kx#list-price) in cents.</summary>
        [Newtonsoft.Json.JsonProperty("listPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ListPrice { get; set; }
    
        /// <summary>Item shipping price in cents. This value does not correspond to the order total shipping price.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Price { get; set; }
    
        /// <summary>Defines if the delivery channel is delivery or pickup.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LogisticsInfo2DeliveryChannel DeliveryChannel { get; set; }
    
        /// <summary>[Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) company name.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryCompany", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryCompany { get; set; }
    
        /// <summary>Order delivery IDs information.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeliveryIds3> DeliveryIds { get; set; }
    
        /// <summary>Shipping estimate date, defined after order confirmation, in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("shippingEstimateDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingEstimateDate { get; set; }
    
        /// <summary>Delivery channels associated with the sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)).</summary>
        [Newtonsoft.Json.JsonProperty("deliveryChannels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeliveryChannels2> DeliveryChannels { get; set; }
    
        /// <summary>SKU ID.</summary>
        [Newtonsoft.Json.JsonProperty("itemId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItemId { get; set; }
    
        /// <summary>List of shipping address countries.</summary>
        [Newtonsoft.Json.JsonProperty("shipsTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ShipsTo { get; set; }
    
        /// <summary>Service Level Agreements (SLA) corresponding to [shipping policies](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).</summary>
        [Newtonsoft.Json.JsonProperty("slas", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Slas2> Slas { get; set; }
    
        /// <summary>Shipping address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressId { get; set; }
    
        /// <summary>Delivery channel selected by the customer. This field is being deprecated and the information it retrieves can be found in the `deliveryChannel` field.</summary>
        [Newtonsoft.Json.JsonProperty("selectedDeliveryChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LogisticsInfo2SelectedDeliveryChannel SelectedDeliveryChannel { get; set; }
    
        /// <summary>Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time.</summary>
        [Newtonsoft.Json.JsonProperty("lockTTL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LockTTL { get; set; }
    
        /// <summary>Service Level Agreement (SLA), which corresponds to the shipping method selected by the customer, usually like normal or express.</summary>
        [Newtonsoft.Json.JsonProperty("selectedSla", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SelectedSla { get; set; }
    
        /// <summary>Each item in the order is identified by an index. The position starts in `0`, followed by `1`, `2`, and so on.</summary>
        [Newtonsoft.Json.JsonProperty("itemIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemIndex { get; set; }
    
        /// <summary>[Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("pickupPointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PickupPointId { get; set; }
    
        /// <summary>Number of days the carrier takes in transit to deliver the order. For instance, three business days is represented `3bd`.</summary>
        [Newtonsoft.Json.JsonProperty("transitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Shipping label details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TrackingHints2 
    {
        /// <summary>Order tracking ID.</summary>
        [Newtonsoft.Json.JsonProperty("trackingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingId { get; set; }
    
        /// <summary>[Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) name.</summary>
        [Newtonsoft.Json.JsonProperty("courierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourierName { get; set; }
    
        /// <summary>Order tracking URL.</summary>
        [Newtonsoft.Json.JsonProperty("trackingUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingUrl { get; set; }
    
        /// <summary>Order tracking label.</summary>
        [Newtonsoft.Json.JsonProperty("trackingLabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingLabel { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Details about a selected adress.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SelectedAddresses2 
    {
        /// <summary>Selected adress shipping type.</summary>
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SelectedAddresses2AddressType AddressType { get; set; }
    
        /// <summary>Full name of the order receiver.</summary>
        [Newtonsoft.Json.JsonProperty("receiverName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverName { get; set; }
    
        /// <summary>Selected address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressId { get; set; }
    
        /// <summary>Selected address version ID.</summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }
    
        /// <summary>Selected address entity ID.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        /// <summary>Selected address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>Selected address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Selected address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Selected address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>Selected address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Selected address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Selected address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        /// <summary>Selected address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement { get; set; }
    
        /// <summary>Selected address additional information.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Selected address pair of geolocation coordinates, first longitude then latitude.</summary>
        [Newtonsoft.Json.JsonProperty("geoCoordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> GeoCoordinates { get; set; }
    
        /// <summary>Contact unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Details about an available adress.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AvailableAddresses2 
    {
        /// <summary>Available adress shipping type.</summary>
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AvailableAddresses2AddressType AddressType { get; set; }
    
        /// <summary>Full name of the order receiver.</summary>
        [Newtonsoft.Json.JsonProperty("receiverName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverName { get; set; }
    
        /// <summary>Available address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressId { get; set; }
    
        /// <summary>Available address version ID.</summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }
    
        /// <summary>Available address entity ID.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        /// <summary>Available address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>Available address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Available address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Available address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>Available address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Available address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Available address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        /// <summary>Available address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement { get; set; }
    
        /// <summary>Available address additional information.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Available address pair of geolocation coordinates, first longitude then latitude.</summary>
        [Newtonsoft.Json.JsonProperty("geoCoordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> GeoCoordinates { get; set; }
    
        /// <summary>Contact unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Order contact details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContactInformation2 
    {
        /// <summary>Contact ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Contact email.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>Contact first name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        /// <summary>Contact last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        /// <summary>Contact document number.</summary>
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Document { get; set; }
    
        /// <summary>Contact phone number.</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        /// <summary>Contact document type.</summary>
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Package details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Packages 
    {
        /// <summary>Name of the [carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) responsible for the package shipping.</summary>
        [Newtonsoft.Json.JsonProperty("courier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Courier { get; set; }
    
        /// <summary>Package description.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Unique identification code of the package invoice.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNumber { get; set; }
    
        /// <summary>Package invoice value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InvoiceValue { get; set; }
    
        /// <summary>Package invoice URL.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceUrl { get; set; }
    
        /// <summary>Package invoice issuance date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("issuanceDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuanceDate { get; set; }
    
        /// <summary>Package [tracking number](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/oms/pvt/orders/-orderId-/invoice/-invoiceNumber-).</summary>
        [Newtonsoft.Json.JsonProperty("trackingNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingNumber { get; set; }
    
        /// <summary>Package invoice key.</summary>
        [Newtonsoft.Json.JsonProperty("invoiceKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceKey { get; set; }
    
        /// <summary>Package tracking URL.</summary>
        [Newtonsoft.Json.JsonProperty("trackingUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrackingUrl { get; set; }
    
        /// <summary>Package invoice text in [xml format](https://help.vtex.com/en/tutorial/configuring-xml--tutorials_242). This field is important for stores integrated with [external marketplaces](https://developers.vtex.com/docs/guides/external-marketplace-integration-guide).</summary>
        [Newtonsoft.Json.JsonProperty("embeddedInvoice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmbeddedInvoice { get; set; }
    
        /// <summary>Package invoice type, which can be:
        /// - `Output`: Selling order invoice.
        /// - `Input`: Returning items invoice.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PackagesType Type { get; set; }
    
        /// <summary>Information on each item in the package.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Items4> Items { get; set; }
    
        /// <summary>[Carrier](https://help.vtex.com/en/tutorial/carriers-on-vtex--7u9duMD5UQa2QQwukAWMcE) shipping information.</summary>
        [Newtonsoft.Json.JsonProperty("courierStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CourierStatus CourierStatus { get; set; }
    
        /// <summary>[CFOP](https://www.gov.br/receitafederal/pt-br/acesso-a-informacao/acoes-e-programas/facilitacao/anexo-ecf-cfop) (_Código Fiscal de Operação e Prestação_) is a Brazilian fiscal code of operations and services that classifies business transaction types.</summary>
        [Newtonsoft.Json.JsonProperty("cfop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cfop { get; set; }
    
        /// <summary>Date since package tracking last change in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("lastChange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastChange { get; set; }
    
        /// <summary>Information about a value being returned to the customer. This field applies only to invoices with the `Input` type because it relates to returning items.</summary>
        [Newtonsoft.Json.JsonProperty("restitutions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Restitutions Restitutions { get; set; }
    
        /// <summary>Indicates the number of boxes (volumes) needed to contain the package items. For example, two refrigerators do not fit in a single volume, so this field would have value `2`.</summary>
        [Newtonsoft.Json.JsonProperty("volumes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Volumes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Order processing details for the marketplace and seller instances.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Instances 
    {
        /// <summary>Workflow instance ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Workflow instance name, related to marketplace and fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Current [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196) in the workflow.</summary>
        [Newtonsoft.Json.JsonProperty("currentStepName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentStepName { get; set; }
    
        /// <summary>Current step description for the order status in the workflow.</summary>
        [Newtonsoft.Json.JsonProperty("currentStepDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentStepDescription { get; set; }
    
        /// <summary>Date of the order last change in the workflow in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("lastChange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastChange { get; set; }
    
        /// <summary>Defines if the order processing in the workflow is in error (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isInError", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsInError { get; set; }
    
        /// <summary>Defines if the order is in automatic processing retry in the workflow (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isInAutomaticRetry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsInAutomaticRetry { get; set; }
    
        /// <summary>Order creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreationDate { get; set; }
    
        /// <summary>Code that identifies the owner.</summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }
    
        /// <summary>Workflow version.</summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        /// <summary>Workflow timeline steps.</summary>
        [Newtonsoft.Json.JsonProperty("timeLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TimeLine> TimeLine { get; set; }
    
        /// <summary>Logical workflow timeline steps.</summary>
        [Newtonsoft.Json.JsonProperty("logicTimeLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LogicTimeLine> LogicTimeLine { get; set; }
    
        /// <summary>Steps in the order processing in the workflow.</summary>
        [Newtonsoft.Json.JsonProperty("steps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Steps> Steps { get; set; }
    
        /// <summary>Name of the order current logical step in the workflow.</summary>
        [Newtonsoft.Json.JsonProperty("currentLogicalStep", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrentLogicalStep { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TotalsId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Items")]
        Items = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Discounts")]
        Discounts = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Shipping")]
        Shipping = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Tax")]
        Tax = 3,
    
    }
    
    /// <summary>Details about the order alternative totals.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlternativeTotals 
    {
        /// <summary>Alternative total ID, which can be related to items, discounts, shipping or taxes.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Alternative total name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Alternative total value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Value { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Receipt with information about a given transaction.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReceiptCollection 
    {
        /// <summary>Receipt transaction type.</summary>
        [Newtonsoft.Json.JsonProperty("receiptType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiptType { get; set; }
    
        /// <summary>Receipt transaction date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a given promotion or tax.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RateAndBenefitsIdentifiers 
    {
        /// <summary>Promotion or tax ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Promotion or tax name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Defines if the [target audience](https://help.vtex.com/en/tutorial/creating-a-campaign-audience--6cnuDZJzIkIeocewAQQK4K) is featured (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("featured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Featured { get; set; }
    
        /// <summary>Promotion or tax description.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Conditions met by the purchase for the promotion or tax to be applied.</summary>
        [Newtonsoft.Json.JsonProperty("matchedParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> MatchedParameters { get; set; }
    
        /// <summary>Object containing additional information about the promotion or tax.</summary>
        [Newtonsoft.Json.JsonProperty("additionalInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> AdditionalInfo { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a promotion teaser.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Teaser 
    {
        /// <summary>Promotion teaser name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Promotion teaser description.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Gift card details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GiftCards 
    {
        /// <summary>Gift card identification.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gift card code used by the customer at checkout.</summary>
        [Newtonsoft.Json.JsonProperty("redemptionCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RedemptionCode { get; set; }
    
        /// <summary>Gift card name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Gift card loyalty program, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("caption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Caption { get; set; }
    
        /// <summary>Gift card value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Value { get; set; }
    
        /// <summary>Gift card current balance. For newly created gift cards, the balance will be `0.0`.</summary>
        [Newtonsoft.Json.JsonProperty("balance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Balance { get; set; }
    
        /// <summary>Gift card provider name.</summary>
        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider { get; set; }
    
        /// <summary>Gift card group name.</summary>
        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupName { get; set; }
    
        /// <summary>Defines if the gift card is in use (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("inUse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool InUse { get; set; }
    
        /// <summary>Defines if the gift card is a special card (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isSpecialCard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSpecialCard { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a given transaction.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Transactions 
    {
        /// <summary>Defines of the transaction is active (`true`) or inactive (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isActive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsActive { get; set; }
    
        /// <summary>Transaction ID.</summary>
        [Newtonsoft.Json.JsonProperty("transactionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransactionId { get; set; }
    
        /// <summary>Merchant name.</summary>
        [Newtonsoft.Json.JsonProperty("merchantName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantName { get; set; }
    
        /// <summary>Payments information.</summary>
        [Newtonsoft.Json.JsonProperty("payments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Payments> Payments { get; set; }
    
        /// <summary>Defines if the transaction is shared (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("sharedTransaction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SharedTransaction { get; set; }
    
        /// <summary>Order payment status in the [transaction flow](https://help.vtex.com/en/tracks/payments--6GAS7ZzGAm7AGoEAwDbwJG/1xjzgJZvqwaI1rfxLMCC3Y).</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address5 
    {
        /// <summary>Invoice address type, which can be `residential`, when the customer gives an address for delivery, or `pickup`, when the customer picks the order at a pickup point.</summary>
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Address5AddressType? AddressType { get; set; }
    
        /// <summary>Full name of the order receiver.</summary>
        [Newtonsoft.Json.JsonProperty("receiverName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverName { get; set; }
    
        /// <summary>Invoice address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressId { get; set; }
    
        /// <summary>Invoice address version ID.</summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }
    
        /// <summary>Invoice address entity ID.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        /// <summary>Invoice address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>Invoice address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Invoice address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Invoice address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>Invoice address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Invoice address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Invoice address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        /// <summary>Invoice address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement { get; set; }
    
        /// <summary>Invoice address additional information.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Invoice address pair of geolocation coordinates, first longitude then latitude.</summary>
        [Newtonsoft.Json.JsonProperty("geoCoordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> GeoCoordinates { get; set; }
    
        /// <summary>Contact unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UserPaymentInfo 
    {
        /// <summary>List of the payment methods used by the customer in the purchase.</summary>
        [Newtonsoft.Json.JsonProperty("paymentMethods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PaymentMethods { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvoiceSubject 
    {
        /// <summary>Invoice subject ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Invoice subject email address.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>Invoice subject first name.</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        /// <summary>Invoice subject last name.</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        /// <summary>Invoice subject phone number.</summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyFormatInfo2 
    {
        /// <summary>Number of currency decimal digits.</summary>
        [Newtonsoft.Json.JsonProperty("CurrencyDecimalDigits", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CurrencyDecimalDigits { get; set; }
    
        /// <summary>Character for currency decimal separation.</summary>
        [Newtonsoft.Json.JsonProperty("CurrencyDecimalSeparator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyDecimalSeparator { get; set; }
    
        /// <summary>Character for currency group separation.</summary>
        [Newtonsoft.Json.JsonProperty("CurrencyGroupSeparator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyGroupSeparator { get; set; }
    
        /// <summary>Limit of characters that can be grouped for currency groups.</summary>
        [Newtonsoft.Json.JsonProperty("CurrencyGroupSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CurrencyGroupSize { get; set; }
    
        /// <summary>Defines if the prices displayed for customers start with the currency symbol (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("StartsWithCurrencySymbol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool StartsWithCurrencySymbol { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Metadata details about a given item</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Items3 
    {
        /// <summary>SKU ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Seller ID.</summary>
        [Newtonsoft.Json.JsonProperty("seller", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Seller { get; set; }
    
        /// <summary>Item name as displayed to customers in the storefront.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>SKU name.</summary>
        [Newtonsoft.Json.JsonProperty("skuName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SkuName { get; set; }
    
        /// <summary>Product ID.</summary>
        [Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductId { get; set; }
    
        /// <summary>SKU reference ID.</summary>
        [Newtonsoft.Json.JsonProperty("refId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RefId { get; set; }
    
        /// <summary>European Article Number (EAN) of the item.</summary>
        [Newtonsoft.Json.JsonProperty("ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }
    
        /// <summary>SKU image URL.</summary>
        [Newtonsoft.Json.JsonProperty("imageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUrl { get; set; }
    
        /// <summary>SKU slug.</summary>
        [Newtonsoft.Json.JsonProperty("detailUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailUrl { get; set; }
    
        /// <summary>[Assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) information related to the item, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("assemblyOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AssemblyOptions> AssemblyOptions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ListOrigin
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Marketplace")]
        Marketplace = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fulfillment")]
        Fulfillment = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Chain")]
        Chain = 2,
    
    }
    
    /// <summary>Delivery channel.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DeliveryChannel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
        Delivery = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup-in-point")]
        PickupInPoint = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Stats3 
    {
        /// <summary>Stats total value.</summary>
        [Newtonsoft.Json.JsonProperty("totalValue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalValue2 TotalValue { get; set; } = new TotalValue2();
    
        /// <summary>Stats total items.</summary>
        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public TotalItems2 TotalItems { get; set; } = new TotalItems2();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address6 
    {
        /// <summary>Pickup point address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>Three-digit country code of the pickup point address in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>Pickup point address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Pickup point address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Pickup point address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        /// <summary>Pickup point address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Pickup point address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Pickup point address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement { get; set; }
    
        /// <summary>Pickup point address reference.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Pickup point geolocation coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location2 Location { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DeliveryChannelsId
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
        Delivery = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup-in-point")]
        PickupInPoint = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PickupStoreInfo3 
    {
        /// <summary>Defines if the shipping type was pickup (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isPickupStore", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPickupStore { get; set; }
    
        /// <summary>Name of the pickup point displayed at checkout.</summary>
        [Newtonsoft.Json.JsonProperty("friendlyName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FriendlyName { get; set; }
    
        /// <summary>Pickup point address information.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.AllowNull)]
        public Address7 Address { get; set; }
    
        /// <summary>Additional information.</summary>
        [Newtonsoft.Json.JsonProperty("additionalInfo", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AdditionalInfo { get; set; }
    
        /// <summary>ID of the loading dock related to the pickup point.</summary>
        [Newtonsoft.Json.JsonProperty("dockId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DockId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a delivery ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeliveryIds2 
    {
        /// <summary>Carrier ID.</summary>
        [Newtonsoft.Json.JsonProperty("courierId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourierId { get; set; }
    
        /// <summary>[Warehouse](https://help.vtex.com/en/tutorial/warehouse--6oIxvsVDTtGpO7y6zwhGpb) ID.</summary>
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseId { get; set; }
    
        /// <summary>[Loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) ID.</summary>
        [Newtonsoft.Json.JsonProperty("dockId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DockId { get; set; }
    
        /// <summary>Carrier name.</summary>
        [Newtonsoft.Json.JsonProperty("courierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourierName { get; set; }
    
        /// <summary>Quantity of items being delivered.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        /// <summary>Total list price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("totalListPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalListPrice { get; set; }
    
        /// <summary>Account carrier name.</summary>
        [Newtonsoft.Json.JsonProperty("accountCarrierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountCarrierName { get; set; }
    
        /// <summary>Information about [kit](https://help.vtex.com/tutorial/what-is-a-kit--5ov5s3eHM4AqAAgqWwoc28) items, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("kitItemDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> KitItemDetails { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SlasDeliveryChannel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
        Delivery = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup-in-point")]
        PickupInPoint = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Facets 
    {
        /// <summary>Value facets origin.</summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Origin Origin { get; set; } = new Origin();
    
        /// <summary>Total value currency code in [ISO 4217](https://www.iban.com/currency-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyCode CurrencyCode { get; set; } = new CurrencyCode();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Facets2 
    {
        /// <summary>Items facets origin.</summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Origin2 Origin { get; set; } = new Origin2();
    
        /// <summary>Total items currency code in [ISO 4217](https://www.iban.com/currency-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyCode2 CurrencyCode { get; set; } = new CurrencyCode2();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Dimension 
    {
        /// <summary>Item cubic weight.</summary>
        [Newtonsoft.Json.JsonProperty("cubicweight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Cubicweight { get; set; }
    
        /// <summary>Item height.</summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Height { get; set; }
    
        /// <summary>Item length.</summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Length { get; set; }
    
        /// <summary>Item weight.</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Weight { get; set; }
    
        /// <summary>Item width.</summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Width { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a given category.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Categories 
    {
        /// <summary>Category ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Category name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Price value per quantity.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SellingPrices 
    {
        /// <summary>Item selling price value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Value { get; set; }
    
        /// <summary>Item quantity.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Plan 
    {
        /// <summary>Plan type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        /// <summary>Information about subscriptions' recurrence.</summary>
        [Newtonsoft.Json.JsonProperty("frequency", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Frequency Frequency { get; set; }
    
        /// <summary>Information about the period during which the subscription will be valid.</summary>
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Validity Validity { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PriceTags2 
    {
        /// <summary>Defines if the taxes were designated by the marketplace (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("areTaxesDesignatedByMarketplace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AreTaxesDesignatedByMarketplace { get; set; }
    
        /// <summary>Array with taxes' details.</summary>
        [Newtonsoft.Json.JsonProperty("taxInfoCollection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TaxInfoCollection2> TaxInfoCollection { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about an item added to the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemsAdded2 
    {
        /// <summary>Added item SKU ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Added item SKU name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Quantity of items added.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        /// <summary>Added item price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Price { get; set; }
    
        /// <summary>Added item unit multiplier.</summary>
        [Newtonsoft.Json.JsonProperty("unitMultiplier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitMultiplier { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about an item removed from the order.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ItemsRemoved2 
    {
        /// <summary>Removed item SKU ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Removed item name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Quantity of removed items.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
        /// <summary>Removed item price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public int Price { get; set; }
    
        /// <summary>Removed item unit multiplier.</summary>
        [Newtonsoft.Json.JsonProperty("unitMultiplier", Required = Newtonsoft.Json.Required.AllowNull)]
        public string UnitMultiplier { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Receipt2 
    {
        /// <summary>Receipt creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Date { get; set; }
    
        /// <summary>Order ID.</summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }
    
        /// <summary>Receipt unique identifier code.</summary>
        [Newtonsoft.Json.JsonProperty("receipt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Receipt { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Address4AddressType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"residential")]
        Residential = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
        Pickup = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PickupStoreInfo4 
    {
        /// <summary>Defines if the shipping type was pickup (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isPickupStore", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPickupStore { get; set; }
    
        /// <summary>Name of the pickup point displayed at checkout.</summary>
        [Newtonsoft.Json.JsonProperty("friendlyName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FriendlyName { get; set; }
    
        /// <summary>Pickup point address information.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.AllowNull)]
        public Address8 Address { get; set; }
    
        /// <summary>Additional information.</summary>
        [Newtonsoft.Json.JsonProperty("additionalInfo", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AdditionalInfo { get; set; }
    
        /// <summary>ID of the loading dock related to the pickup point.</summary>
        [Newtonsoft.Json.JsonProperty("dockId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DockId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LogisticsInfo2DeliveryChannel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
        Delivery = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup-in-point")]
        PickupInPoint = 1,
    
    }
    
    /// <summary>Information about a delivery ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeliveryIds3 
    {
        /// <summary>Carrier ID.</summary>
        [Newtonsoft.Json.JsonProperty("courierId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourierId { get; set; }
    
        /// <summary>[Warehouse](https://help.vtex.com/en/tutorial/warehouse--6oIxvsVDTtGpO7y6zwhGpb) ID.</summary>
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseId { get; set; }
    
        /// <summary>[Loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) ID.</summary>
        [Newtonsoft.Json.JsonProperty("dockId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DockId { get; set; }
    
        /// <summary>Carrier name.</summary>
        [Newtonsoft.Json.JsonProperty("courierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourierName { get; set; }
    
        /// <summary>Quantity of items being delivered.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        /// <summary>Total list price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("totalListPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalListPrice { get; set; }
    
        /// <summary>Account carrier name.</summary>
        [Newtonsoft.Json.JsonProperty("accountCarrierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountCarrierName { get; set; }
    
        /// <summary>Information about [kit](https://help.vtex.com/tutorial/what-is-a-kit--5ov5s3eHM4AqAAgqWwoc28) items, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("kitItemDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> KitItemDetails { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Delivery channel information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeliveryChannels2 
    {
        /// <summary>Delivery channel shipping type.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeliveryChannels2Id Id { get; set; }
    
        /// <summary>Stock check for SKU availability.</summary>
        [Newtonsoft.Json.JsonProperty("stockBalance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StockBalance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Service Level Agreement (SLA) information.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Slas2 
    {
        /// <summary>[Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID related to the SLA.</summary>
        [Newtonsoft.Json.JsonProperty("pickupPointId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PickupPointId { get; set; }
    
        /// <summary>Information about a [loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) that was transformed into a [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).</summary>
        [Newtonsoft.Json.JsonProperty("pickupStoreInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PickupStoreInfo5 PickupStoreInfo { get; set; }
    
        /// <summary>SLA tax information.</summary>
        [Newtonsoft.Json.JsonProperty("tax", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Tax { get; set; }
    
        /// <summary>SLA shipping list price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("listPrice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ListPrice { get; set; }
    
        /// <summary>SLA shipping price in cents. Does not account for the order total shipping price.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Price { get; set; }
    
        /// <summary>[Delivery window](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryWindow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveryWindow { get; set; }
    
        /// <summary>Available delivery windows information, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("availableDeliveryWindows", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AvailableDeliveryWindows { get; set; }
    
        /// <summary>Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time related to the SLA.</summary>
        [Newtonsoft.Json.JsonProperty("lockTTL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LockTTL { get; set; }
    
        /// <summary>SLA shipping estimate date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("shippingEstimateDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingEstimateDate { get; set; }
    
        /// <summary>Shipping estimate time in days. For instance, three business days is represented `3bd`.</summary>
        [Newtonsoft.Json.JsonProperty("shippingEstimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingEstimate { get; set; }
    
        /// <summary>SLA delivery IDs information.</summary>
        [Newtonsoft.Json.JsonProperty("deliveryIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeliveryIds4> DeliveryIds { get; set; }
    
        /// <summary>[Shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140) name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Defines if the delivery channel is delivery or [pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R).</summary>
        [Newtonsoft.Json.JsonProperty("deliveryChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Slas2DeliveryChannel DeliveryChannel { get; set; }
    
        /// <summary>ID of the shipping method used in the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Distance in kilometers between the pickup point and the customer address. The distance is measured as a straight line.</summary>
        [Newtonsoft.Json.JsonProperty("pickupDistance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PickupDistance { get; set; }
    
        /// <summary>Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.</summary>
        [Newtonsoft.Json.JsonProperty("polygonName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolygonName { get; set; }
    
        /// <summary>Number of days the carrier takes in transit to deliver the order. For instance, three business days is represented `3bd`.</summary>
        [Newtonsoft.Json.JsonProperty("transitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LogisticsInfo2SelectedDeliveryChannel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
        Delivery = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup-in-point")]
        PickupInPoint = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SelectedAddresses2AddressType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"residential")]
        Residential = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
        Pickup = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AvailableAddresses2AddressType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"residential")]
        Residential = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
        Pickup = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PackagesType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Output")]
        Output = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Input")]
        Input = 1,
    
    }
    
    /// <summary>Package item details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Items4 
    {
        /// <summary>Item index of the item position whithin the `items` array. The count starts at `0`.</summary>
        [Newtonsoft.Json.JsonProperty("itemIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemIndex { get; set; }
    
        /// <summary>SKU ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Package item quantity.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        /// <summary>Package item price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Price { get; set; }
    
        /// <summary>Package item description.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Package item unit multiplier.</summary>
        [Newtonsoft.Json.JsonProperty("unitMultiplier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UnitMultiplier { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CourierStatus 
    {
        /// <summary>Package delivery date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("deliveredDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeliveredDate { get; set; }
    
        /// <summary>Defines if a carrier was assigned for order shipping (`ok`) or not (`null`).</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Defines if the carrier has already delivered the package (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Finished { get; set; }
    
        /// <summary>Package tracking information.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Data> Data { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Restitutions 
    {
        /// <summary>Customer refund details.</summary>
        [Newtonsoft.Json.JsonProperty("refund", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Refund Refund { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a given workflow timeline step.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TimeLine 
    {
        /// <summary>Name of the timeline step.</summary>
        [Newtonsoft.Json.JsonProperty("stepName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StepName { get; set; }
    
        /// <summary>Timeline step processing date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }
    
        /// <summary>Timeline parent step name.</summary>
        [Newtonsoft.Json.JsonProperty("parentStepName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentStepName { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a given logical workflow timeline step.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LogicTimeLine 
    {
        /// <summary>Name of the logical timeline step.</summary>
        [Newtonsoft.Json.JsonProperty("stepName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StepName { get; set; }
    
        /// <summary>Logical timeline step processing date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Details about a given step in the order processing.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Steps 
    {
        /// <summary>Order processing step name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Next order steps in the workflow.</summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Next> Next { get; set; }
    
        /// <summary>Defines if the order can move to the next workflow status (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("systemWillMove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SystemWillMove { get; set; }
    
        /// <summary>Type of actions allowed for order processing in the workflow.</summary>
        [Newtonsoft.Json.JsonProperty("actionsAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActionsAllowed ActionsAllowed { get; set; }
    
        /// <summary>Defines if the step corresponds to the order creation (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Start { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Payment details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Payments 
    {
        /// <summary>Bank issued invoice numeric sequence formatted as customers see.</summary>
        [Newtonsoft.Json.JsonProperty("bankIssuedInvoiceIdentificationNumberFormatted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankIssuedInvoiceIdentificationNumberFormatted { get; set; }
    
        /// <summary>Bank issued invoice numeric sequence.</summary>
        [Newtonsoft.Json.JsonProperty("bankIssuedInvoiceIdentificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankIssuedInvoiceIdentificationNumber { get; set; }
    
        /// <summary>When the payment was made in a subaccount, this field retrieves the main account ID.</summary>
        [Newtonsoft.Json.JsonProperty("parentAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentAccountId { get; set; }
    
        /// <summary>Identification code of the account where the payment was made.</summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }
    
        /// <summary>Payment due date in `MM/YY` format.</summary>
        [Newtonsoft.Json.JsonProperty("dueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DueDate { get; set; }
    
        /// <summary>Transaction payment method, which can be credit card, debid card, bank invoice, promissory, gift card or pix (`instantPayment`).</summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PaymentsGroup Group { get; set; }
    
        /// <summary>Defines if the payment has a gift card discount (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isGiftCardDiscount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsGiftCardDiscount { get; set; }
    
        /// <summary>Gift card name.</summary>
        [Newtonsoft.Json.JsonProperty("giftCardName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GiftCardName { get; set; }
    
        /// <summary>Gift card caption.</summary>
        [Newtonsoft.Json.JsonProperty("giftCardCaption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GiftCardCaption { get; set; }
    
        /// <summary>Gift card provider ID.</summary>
        [Newtonsoft.Json.JsonProperty("giftCardProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GiftCardProvider { get; set; }
    
        /// <summary>Gift card ID.</summary>
        [Newtonsoft.Json.JsonProperty("giftCardId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GiftCardId { get; set; }
    
        /// <summary>Gift card code used by the customer at checkout.</summary>
        [Newtonsoft.Json.JsonProperty("redemptionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RedemptionCode { get; set; }
    
        /// <summary>Provider unique identifier for the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("tid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tid { get; set; }
    
        /// <summary>Koin connector URL.</summary>
        [Newtonsoft.Json.JsonProperty("koinUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KoinUrl { get; set; }
    
        /// <summary>Payment URL.</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        /// <summary>Card expiration year in 4-digit format.</summary>
        [Newtonsoft.Json.JsonProperty("expireYear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpireYear { get; set; }
    
        /// <summary>Card expiration month in 2-digit format.</summary>
        [Newtonsoft.Json.JsonProperty("expireMonth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpireMonth { get; set; }
    
        /// <summary>Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.</summary>
        [Newtonsoft.Json.JsonProperty("cvv2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cvv2 { get; set; }
    
        /// <summary>Card last four digits.</summary>
        [Newtonsoft.Json.JsonProperty("lastDigits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastDigits { get; set; }
    
        /// <summary>Card first four digits.</summary>
        [Newtonsoft.Json.JsonProperty("firstDigits", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstDigits { get; set; }
    
        /// <summary>Card number.</summary>
        [Newtonsoft.Json.JsonProperty("cardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardNumber { get; set; }
    
        /// <summary>Name of the card owner.</summary>
        [Newtonsoft.Json.JsonProperty("cardHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CardHolder { get; set; }
    
        /// <summary>Total payment reference value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("referenceValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ReferenceValue { get; set; }
    
        /// <summary>Payment provider (connector) responses. The fields within this object can vary according to the order payment provider.</summary>
        [Newtonsoft.Json.JsonProperty("connectorResponses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConnectorResponses ConnectorResponses { get; set; }
    
        /// <summary>Order total payment value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Value { get; set; }
    
        /// <summary>Payment system name.</summary>
        [Newtonsoft.Json.JsonProperty("paymentSystemName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentSystemName { get; set; }
    
        /// <summary>Payment system ID.</summary>
        [Newtonsoft.Json.JsonProperty("paymentSystem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentSystem { get; set; }
    
        /// <summary>Type of [wallet](https://help.vtex.com/en/tutorial/what-is-an-e-wallet--4v5wcOe4A0SiaimWM2cU60) used in the payment.</summary>
        [Newtonsoft.Json.JsonProperty("paymentOrigin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentOrigin { get; set; }
    
        /// <summary>Payment unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Bank issued invoice bar code number.</summary>
        [Newtonsoft.Json.JsonProperty("bankIssuedInvoiceBarCodeNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankIssuedInvoiceBarCodeNumber { get; set; }
    
        /// <summary>Bank issued invoice bar code type.</summary>
        [Newtonsoft.Json.JsonProperty("bankIssuedInvoiceBarCodeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankIssuedInvoiceBarCodeType { get; set; }
    
        /// <summary>Billing address information.</summary>
        [Newtonsoft.Json.JsonProperty("billingAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BillingAddress BillingAddress { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Address5AddressType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"residential")]
        Residential = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
        Pickup = 1,
    
    }
    
    /// <summary>[Assembly option](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AssemblyOptions 
    {
        /// <summary>Assembly option ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Assembly option name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Defines if sending the attachment for the item purchased is required(`true`) or optional (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Required { get; set; }
    
        /// <summary>Assembly option content.</summary>
        [Newtonsoft.Json.JsonProperty("inputValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> InputValues { get; set; }
    
        /// <summary>Assembly option composition.</summary>
        [Newtonsoft.Json.JsonProperty("composition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Composition { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TotalValue2 
    {
        /// <summary>Value count.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum value.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Value mean.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum value.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing values.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of values.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Value sum of squares.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to total values.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Facets3 Facets { get; set; } = new Facets3();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TotalItems2 
    {
        /// <summary>Items count.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum items.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Total items mean.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum items.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing items.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of items.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Items sum of squares.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to total items.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public Facets4 Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Location2 
    {
        /// <summary>Latitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }
    
        /// <summary>Longitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address7 
    {
        /// <summary>Pickup point address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>Three-digit country code of the pickup point address in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>Pickup point address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Pickup point address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Pickup point address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        /// <summary>Pickup point address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Pickup point address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Pickup point address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement { get; set; }
    
        /// <summary>Pickup point address reference.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Pickup point geolocation coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location3 Location { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Origin 
    {
        /// <summary>Seller (fulfillment) facets information.</summary>
        [Newtonsoft.Json.JsonProperty("Fulfillment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Fulfillment Fulfillment { get; set; } = new Fulfillment();
    
        /// <summary>Marketplace facets information.</summary>
        [Newtonsoft.Json.JsonProperty("Marketplace", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Marketplace2 Marketplace { get; set; } = new Marketplace2();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyCode 
    {
        /// <summary>Currency code facets information.</summary>
        [Newtonsoft.Json.JsonProperty("BRL", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BRL BRL { get; set; } = new BRL();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Origin2 
    {
        /// <summary>Seller (fulfillment) facets information related to total items.</summary>
        [Newtonsoft.Json.JsonProperty("Fulfillment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Fulfillment2 Fulfillment { get; set; } = new Fulfillment2();
    
        /// <summary>Marketplace facets information related to total items.</summary>
        [Newtonsoft.Json.JsonProperty("Marketplace", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Marketplace3 Marketplace { get; set; } = new Marketplace3();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyCode2 
    {
        /// <summary>Currency code facets information.</summary>
        [Newtonsoft.Json.JsonProperty("BRL", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BRL2 BRL { get; set; } = new BRL2();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Frequency 
    {
        /// <summary>Defines the subscription recurrence period.</summary>
        [Newtonsoft.Json.JsonProperty("periodicity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FrequencyPeriodicity Periodicity { get; set; }
    
        /// <summary>Time interval configured between subscription orders, which depends on the frequency. For a `DAY` frequency, the value will be days, for `MONTH` it will be months, and so on.</summary>
        [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Interval { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Validity 
    {
        /// <summary>Subscription plan beginning date and time in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("begin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Begin { get; set; }
    
        /// <summary>Subscription plan ending date and time in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string End { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Details about a given tax.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TaxInfoCollection2 
    {
        /// <summary>Item index number.</summary>
        [Newtonsoft.Json.JsonProperty("itemIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemIndex { get; set; }
    
        /// <summary>Alphanumeric sequence that identifies a SKU.</summary>
        [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sku { get; set; }
    
        /// <summary>Price tags information with the original taxes calculated at order placement.</summary>
        [Newtonsoft.Json.JsonProperty("priceTags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PriceTags3> PriceTags { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address8 
    {
        /// <summary>Pickup point address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>Three-digit country code of the pickup point address in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>Pickup point address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Pickup point address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Pickup point address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        /// <summary>Pickup point address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Pickup point address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Pickup point address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement { get; set; }
    
        /// <summary>Pickup point address reference.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Pickup point geolocation coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location4 Location { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DeliveryChannels2Id
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
        Delivery = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup-in-point")]
        PickupInPoint = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PickupStoreInfo5 
    {
        /// <summary>Defines if the shipping type was pickup (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isPickupStore", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPickupStore { get; set; }
    
        /// <summary>Name of the pickup point displayed at checkout.</summary>
        [Newtonsoft.Json.JsonProperty("friendlyName", Required = Newtonsoft.Json.Required.AllowNull)]
        public string FriendlyName { get; set; }
    
        /// <summary>Pickup point address information.</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.AllowNull)]
        public Address9 Address { get; set; }
    
        /// <summary>Additional information.</summary>
        [Newtonsoft.Json.JsonProperty("additionalInfo", Required = Newtonsoft.Json.Required.AllowNull)]
        public string AdditionalInfo { get; set; }
    
        /// <summary>ID of the loading dock related to the pickup point.</summary>
        [Newtonsoft.Json.JsonProperty("dockId", Required = Newtonsoft.Json.Required.AllowNull)]
        public string DockId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a delivery ID.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeliveryIds4 
    {
        /// <summary>Carrier ID.</summary>
        [Newtonsoft.Json.JsonProperty("courierId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourierId { get; set; }
    
        /// <summary>[Warehouse](https://help.vtex.com/en/tutorial/warehouse--6oIxvsVDTtGpO7y6zwhGpb) ID.</summary>
        [Newtonsoft.Json.JsonProperty("warehouseId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WarehouseId { get; set; }
    
        /// <summary>[Loading dock](https://help.vtex.com/en/tutorial/loading-dock--5DY8xHEjOLYDVL41Urd5qj) ID.</summary>
        [Newtonsoft.Json.JsonProperty("dockId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DockId { get; set; }
    
        /// <summary>Carrier name.</summary>
        [Newtonsoft.Json.JsonProperty("courierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CourierName { get; set; }
    
        /// <summary>Quantity of items being delivered.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        /// <summary>Total list price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("totalListPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalListPrice { get; set; }
    
        /// <summary>Account carrier name.</summary>
        [Newtonsoft.Json.JsonProperty("accountCarrierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountCarrierName { get; set; }
    
        /// <summary>Information about [kit](https://help.vtex.com/tutorial/what-is-a-kit--5ov5s3eHM4AqAAgqWwoc28) items, when applicable.</summary>
        [Newtonsoft.Json.JsonProperty("kitItemDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> KitItemDetails { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Slas2DeliveryChannel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"delivery")]
        Delivery = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup-in-point")]
        PickupInPoint = 1,
    
    }
    
    /// <summary>Package tracking details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Data 
    {
        /// <summary>Date since package tracking last change in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("lastChange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastChange { get; set; }
    
        /// <summary>Package tracking city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Package tracking state in two-digit code format.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Package tracking description.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>Package tracking creation date in [ISO 8601 time zone offset format](https://learn.microsoft.com/en-us/rest/api/storageservices/formatting-datetime-values), as in `YYYY-MM-DDThh:mm:ssZ`.</summary>
        [Newtonsoft.Json.JsonProperty("createDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreateDate { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Refund 
    {
        /// <summary>Refund value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Value { get; set; }
    
        /// <summary>Refund involving a [gift card](https://developers.vtex.com/docs/guides/gift-card-integration-guide).</summary>
        [Newtonsoft.Json.JsonProperty("giftCardData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GiftCardData { get; set; }
    
        /// <summary>Information about the items being returned.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Items5> Items { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Information about a given step in the workflow.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Next 
    {
        /// <summary>Step status name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Next order status step.</summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next1 { get; set; }
    
        /// <summary>Defines if the order can move to the next step (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("systemWillMove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SystemWillMove { get; set; }
    
        /// <summary>Type of actions allowed in the next steps.</summary>
        [Newtonsoft.Json.JsonProperty("actionsAllowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActionsAllowed2 ActionsAllowed { get; set; }
    
        /// <summary>Defines if the order is progressing in the workflow as expected (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("expectFlow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExpectFlow { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ActionsAllowed 
    {
        /// <summary>Name of the order action allowed.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PaymentsGroup
    {
        [System.Runtime.Serialization.EnumMember(Value = @"creditCard")]
        CreditCard = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"debitCard")]
        DebitCard = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bankInvoice")]
        BankInvoice = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"promissory")]
        Promissory = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"giftCard")]
        GiftCard = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"instantPayment")]
        InstantPayment = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConnectorResponses 
    {
        /// <summary>Provider operational message or error to be logged.</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        /// <summary>Provider authorization ID.</summary>
        [Newtonsoft.Json.JsonProperty("authorizationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorizationId { get; set; }
    
        /// <summary>Order payment status in the [transaction flow](https://help.vtex.com/en/tracks/payments--6GAS7ZzGAm7AGoEAwDbwJG/1xjzgJZvqwaI1rfxLMCC3Y).</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>Total time (in seconds) before the auto settle, when the platform makes an automatic call to `/settlements`, regardless if the payment was approved by the merchant's anti-fraud provider. The maximum value allowed is `604800` seconds (7 days).</summary>
        [Newtonsoft.Json.JsonProperty("delayToAutoSettle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DelayToAutoSettle { get; set; }
    
        /// <summary>Provider operational return code or error to be logged.</summary>
        [Newtonsoft.Json.JsonProperty("ReturnCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReturnCode { get; set; }
    
        /// <summary>Provider unique sequential number for the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("nsu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nsu { get; set; }
    
        /// <summary>Provider operational code or error to be logged.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        /// <summary>Provider unique identifier for the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("Tid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tid { get; set; }
    
        /// <summary>[Acquirer](https://help.vtex.com/en/tracks/payments--6GAS7ZzGAm7AGoEAwDbwJG/kdPbEIWf8Xq8tESQvViMB#acquirer) name (mostly used for card payments).</summary>
        [Newtonsoft.Json.JsonProperty("acquirer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Acquirer { get; set; }
    
        /// <summary>Authorization identification.</summary>
        [Newtonsoft.Json.JsonProperty("authId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthId { get; set; }
    
        /// <summary>Payment ID.</summary>
        [Newtonsoft.Json.JsonProperty("paymentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentId { get; set; }
    
        /// <summary>Total time (in seconds) before the auto settle, when the platform makes an automatic call to `/settlements`. This happens only after the payment was approved by the merchant's anti-fraud provider.</summary>
        [Newtonsoft.Json.JsonProperty("delayToAutoSettleAfterAntifraud", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DelayToAutoSettleAfterAntifraud { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BillingAddress 
    {
        /// <summary>Billing address type, which can be `residential`, when the customer gives an address for delivery, or `pickup`, when the customer picks the order at a pickup point.</summary>
        [Newtonsoft.Json.JsonProperty("addressType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BillingAddressAddressType AddressType { get; set; }
    
        /// <summary>Full name of the order receiver.</summary>
        [Newtonsoft.Json.JsonProperty("receiverName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReceiverName { get; set; }
    
        /// <summary>Billing address ID.</summary>
        [Newtonsoft.Json.JsonProperty("addressId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressId { get; set; }
    
        /// <summary>Billing address version ID.</summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionId { get; set; }
    
        /// <summary>Billing address entity ID.</summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }
    
        /// <summary>Billing address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>Billing address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Billing address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Billing address three-digit country code in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>Billing address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Billing address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Billing address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        /// <summary>Billing address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement { get; set; }
    
        /// <summary>Billing address additional information.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Billing address pair of geolocation coordinates, first longitude then latitude.</summary>
        [Newtonsoft.Json.JsonProperty("geoCoordinates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<double> GeoCoordinates { get; set; }
    
        /// <summary>Billing contact unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("contactId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Facets3 
    {
        /// <summary>Value facets origin.</summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Origin3 Origin { get; set; } = new Origin3();
    
        /// <summary>Total value currency code in [ISO 4217](https://www.iban.com/currency-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyCode3 CurrencyCode { get; set; } = new CurrencyCode3();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Facets4 
    {
        /// <summary>Items facets origin.</summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Origin4 Origin { get; set; } = new Origin4();
    
        /// <summary>Total items currency code in [ISO 4217](https://www.iban.com/currency-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CurrencyCode4 CurrencyCode { get; set; } = new CurrencyCode4();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Location3 
    {
        /// <summary>Latitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }
    
        /// <summary>Longitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Fulfillment 
    {
        /// <summary>Value count related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum value related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Value mean related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing values related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Value sum related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Sum of squares related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public int SumOfSquares { get; set; }
    
        /// <summary>Facets related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Marketplace2 
    {
        /// <summary>Value count related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum value related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Value mean related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum value related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing values related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Values sum related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Sum of squares related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BRL 
    {
        /// <summary>Value count related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum value related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Value mean related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum value related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing values related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of values related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Sum of squares related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Fulfillment2 
    {
        /// <summary>Items count related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum of items related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Items mean related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum of items related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing items related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of items related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Items sum of squares related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public int SumOfSquares { get; set; }
    
        /// <summary>Facets related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Marketplace3 
    {
        /// <summary>Items count related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum of items related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Items mean related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum of items related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing items related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of items related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Sum of squares related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BRL2 
    {
        /// <summary>Items count related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum of items related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Items mean related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum of items related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing items related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of items related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Sum of squares related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FrequencyPeriodicity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DAILY")]
        DAILY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WEEKLY")]
        WEEKLY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MONTHLY")]
        MONTHLY = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"YEARLY")]
        YEARLY = 3,
    
    }
    
    /// <summary>Information about a given price tag.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PriceTags3 
    {
        /// <summary>Price tag identifier code.</summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }
    
        /// <summary>Indicates whether price tag value is applied through a percentage (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isPercentual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPercentual { get; set; }
    
        /// <summary>Price tag name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Price tag value.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Value { get; set; }
    
        /// <summary>Price tag raw value that can contain up to five decimals, separated by a period.</summary>
        [Newtonsoft.Json.JsonProperty("rawValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RawValue { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Location4 
    {
        /// <summary>Latitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }
    
        /// <summary>Longitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Address9 
    {
        /// <summary>Pickup point address postal code.</summary>
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>Three-digit country code of the pickup point address in [ISO 3166 ALPHA-3](https://www.iban.com/country-codes) format.</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        /// <summary>Pickup point address city.</summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>Pickup point address state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }
    
        /// <summary>Pickup point address neighborhood.</summary>
        [Newtonsoft.Json.JsonProperty("neighborhood", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Neighborhood { get; set; }
    
        /// <summary>Pickup point address street.</summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }
    
        /// <summary>Pickup point address number.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Pickup point address complement.</summary>
        [Newtonsoft.Json.JsonProperty("complement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement { get; set; }
    
        /// <summary>Pickup point address reference.</summary>
        [Newtonsoft.Json.JsonProperty("reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        /// <summary>Pickup point geolocation coordinates.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location5 Location { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Returned item details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Items5 
    {
        /// <summary>Defines if the refund includes freight values (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("useFreight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseFreight { get; set; }
    
        /// <summary>Defines if there are compensated unit tags in the package (`true`) or not (`false`).</summary>
        [Newtonsoft.Json.JsonProperty("isCompensation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCompensation { get; set; }
    
        /// <summary>Compensational refund value in cents.</summary>
        [Newtonsoft.Json.JsonProperty("compensationValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CompensationValue { get; set; }
    
        /// <summary>SKU ID of the returned item.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Number of items being returned.</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        /// <summary>Returned item price in cents.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Price { get; set; }
    
        /// <summary>Customer reason for returning the item.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ActionsAllowed2 
    {
        /// <summary>Name of the order action allowed.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BillingAddressAddressType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"residential")]
        Residential = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pickup")]
        Pickup = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Origin3 
    {
        /// <summary>Seller (fulfillment) facets information.</summary>
        [Newtonsoft.Json.JsonProperty("Fulfillment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Fulfillment3 Fulfillment { get; set; } = new Fulfillment3();
    
        /// <summary>Marketplace facets information.</summary>
        [Newtonsoft.Json.JsonProperty("Marketplace", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Marketplace4 Marketplace { get; set; } = new Marketplace4();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyCode3 
    {
        /// <summary>Currency code facets information.</summary>
        [Newtonsoft.Json.JsonProperty("BRL", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BRL3 BRL { get; set; } = new BRL3();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Origin4 
    {
        /// <summary>Seller (fulfillment) facets information related to total items.</summary>
        [Newtonsoft.Json.JsonProperty("Fulfillment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Fulfillment4 Fulfillment { get; set; } = new Fulfillment4();
    
        /// <summary>Marketplace facets information related to total items.</summary>
        [Newtonsoft.Json.JsonProperty("Marketplace", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Marketplace5 Marketplace { get; set; } = new Marketplace5();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CurrencyCode4 
    {
        /// <summary>Currency code facets information.</summary>
        [Newtonsoft.Json.JsonProperty("BRL", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public BRL4 BRL { get; set; } = new BRL4();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Location5 
    {
        /// <summary>Latitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }
    
        /// <summary>Longitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Fulfillment3 
    {
        /// <summary>Value count related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum value related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Value mean related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing values related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Value sum related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Sum of squares related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public int SumOfSquares { get; set; }
    
        /// <summary>Facets related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Marketplace4 
    {
        /// <summary>Value count related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum value related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Value mean related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum value related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing values related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Values sum related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Sum of squares related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BRL3 
    {
        /// <summary>Value count related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum value related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Value mean related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum value related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing values related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of values related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Sum of squares related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Fulfillment4 
    {
        /// <summary>Items count related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum of items related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Items mean related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum of items related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing items related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of items related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Items sum of squares related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public int SumOfSquares { get; set; }
    
        /// <summary>Facets related to fulfillment.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Marketplace5 
    {
        /// <summary>Items count related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum of items related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Items mean related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum of items related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing items related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of items related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Sum of squares related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to the marketplace.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BRL4 
    {
        /// <summary>Items count related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }
    
        /// <summary>Maximum of items related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }
    
        /// <summary>Items mean related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Mean", Required = Newtonsoft.Json.Required.Always)]
        public double Mean { get; set; }
    
        /// <summary>Minimum of items related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }
    
        /// <summary>Missing items related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Missing", Required = Newtonsoft.Json.Required.Always)]
        public int Missing { get; set; }
    
        /// <summary>Standard deviation related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("StdDev", Required = Newtonsoft.Json.Required.Always)]
        public double StdDev { get; set; }
    
        /// <summary>Sum of items related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Sum", Required = Newtonsoft.Json.Required.Always)]
        public int Sum { get; set; }
    
        /// <summary>Sum of squares related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("SumOfSquares", Required = Newtonsoft.Json.Required.Always)]
        public long SumOfSquares { get; set; }
    
        /// <summary>Facets related to the currency code.</summary>
        [Newtonsoft.Json.JsonProperty("Facets", Required = Newtonsoft.Json.Required.AllowNull)]
        public string Facets { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108